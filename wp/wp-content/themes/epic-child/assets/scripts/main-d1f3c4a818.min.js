/* eslint-disable vars-on-top, no-var */
(function epicHello() {
    var userAgent = navigator.userAgent.toLowerCase();
    var supported = /(chrome|firefox)/;

    if (supported.test(userAgent.toLowerCase())) {
        var dark = [
            'padding: 20px 5px 16px',
            'background-color: #171718',
            'color: #bc994e',
        ].join(';');

        if (userAgent.indexOf('chrome') > -1) {
            dark += ';';
            dark += [
                'padding: 20px 5px 16px 40px',
                'background-image: url(http://epic.net/img/signature/epic-logo.png)',
                'background-position: 10px 9px',
                'background-repeat: no-repeat',
                'background-size: 26px 30px',
            ].join(';');
        }

        var gold = [
            'padding: 20px 5px 16px',
            'background-color: #bc994e',
            'color: #ffffff',
        ].join(';');

        var spacer = [
            'background-color: transparent',
        ].join(';');

        var msg = '\n\n %c Crafted with ♥︎ by EPIC %c https://www.epic.net %c \n\n\n';

        console.log(msg, dark, gold, spacer);
    } else if (window.console) {
        console.log('Crafted with love by EPIC - https://www.epic.net');
    }
}());
! function(e) {
    function t(t) {
        for (var i, r, a = t[0], l = t[1], u = t[2], h = 0, d = []; h < a.length; h++) r = a[h], s[r] && d.push(s[r][0]), s[r] = 0;
        for (i in l) Object.prototype.hasOwnProperty.call(l, i) && (e[i] = l[i]);
        for (c && c(t); d.length;) d.shift()();
        return o.push.apply(o, u || []), n()
    }

    function n() {
        for (var e, t = 0; t < o.length; t++) {
            for (var n = o[t], i = !0, a = 1; a < n.length; a++) {
                var l = n[a];
                0 !== s[l] && (i = !1)
            }
            i && (o.splice(t--, 1), e = r(r.s = n[0]))
        }
        return e
    }
    var i = {},
        s = {
            1: 0
        },
        o = [];

    function r(t) {
        if (i[t]) return i[t].exports;
        var n = i[t] = {
            i: t,
            l: !1,
            exports: {}
        };
        return e[t].call(n.exports, n, n.exports, r), n.l = !0, n.exports
    }
    r.m = e, r.c = i, r.d = function(e, t, n) {
        r.o(e, t) || Object.defineProperty(e, t, {
            configurable: !1,
            enumerable: !0,
            get: n
        })
    }, r.r = function(e) {
        Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }, r.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        } : function() {
            return e
        };
        return r.d(t, "a", t), t
    }, r.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, r.p = "/dist";
    var a = window.webpackJsonp = window.webpackJsonp || [],
        l = a.push.bind(a);
    a.push = t, a = a.slice();
    for (var u = 0; u < a.length; u++) t(a[u]);
    var c = l;
    o.push([167, 0]), n()
}([, function(e, t, n) {
    "use strict";
    var i = n(3),
        s = n(4);
    const o = new class {
        constructor() {
            this.time = window.performance.now(), this.start = this.start.bind(this), this.pause = this.pause.bind(this), this.onTick = this.onTick.bind(this), s.a.dom && this.start()
        }
        start() {
            this.startTime = window.performance.now(), this.oldTime = this.startTime, this.isPaused = !1, this.onTick(this.startTime)
        }
        pause() {
            this.isPaused = !0
        }
        onTick(e) {
            this.time = e, this.isPaused || (this.delta = (e - this.oldTime) / 1e3, this.oldTime = e, i.b.trigger({
                name: "raf"
            }, {
                delta: this.delta,
                now: e
            })), window.requestAnimationFrame(this.onTick)
        }
    };
    var r = n(11);
    const a = new class extends(Object(i.a)()) {
        init() {
            this.readAndUpdatePage = this.readAndUpdatePage.bind(this), this.whenScroll = this.whenScroll.bind(this), this.whenScroll(), this.speed = 0, this.speed2 = 0, this.oldY = this.y, this.scheduledAnimationFrame = !0, this.vs = s.a.dom, this.vslocked = !0, this.height = 0, this.easeY = this.y, this.parallaxEasedY = this.y, this.wrapper = document.querySelector(".site"), this.vs && this.enablevs(), window.addEventListener("scroll", this.whenScroll)
        }
        lock() {
            this.locked = !0
        }
        unlock() {
            this.locked = !1
        }
        onLoadEnd() {
            this.y = 0, this.oldY = 0, this.easeY = 0, this.parallaxEasedY = 0, window.scrollTo(0, 0), l.onResize(), s.a.boarding || (this.vslocked = !1)
        }
        onVisibilitychange({
            hidden: e
        }) {
            e || (this.oldY = this.y, this.easeY = this.y, this.parallaxEasedY = this.y, this.speed = 0, this.speed2 = 0, l.onResize(), window.setTimeout(() => {
                l.onResize()
            }, 500))
        }
        onResize() {
            this.vs && (this.height = this.wrapper.clientHeight, this.fakeScroll.style.height = `${this.height}px`)
        }
        enablevs() {
            this.vs = !0, this.fakeScroll = document.createElement("div"), this.wrapper.classList.add("vs"), document.body.appendChild(this.fakeScroll)
        }
        readAndUpdatePage() {
            this.scheduledAnimationFrame = !1
        }
        whenScroll() {
            if (this.locked) return;
            const e = document.documentElement,
                t = document.body ? document.body.clientHeight : 0,
                n = window.innerHeight;
            this.x = (window.pageXOffset || e.scrollLeft) - (e.clientLeft || 0), this.y = window.pageYOffset || document.documentElement.scrollTop, this.progressY = this.y / (t - n), i.b.trigger({
                name: "scroll",
                fireAtStart: !0
            }, {
                x: this.x,
                y: this.y,
                progressY: this.progressY
            }), this.scheduledAnimationFrame || (this.scheduledAnimationFrame = !0, requestAnimationFrame(this.readAndUpdatePage))
        }
        onRaf({
            delta: e
        }) {
            const t = this.oldY - this.y;
            this.speedTarget = .2 * Object(r.clamp)(0, 3, Math.abs(t)), this.speedTarget2 = .2 * Object(r.clamp)(-3, 3, t), this.oldY = this.y, this.speed = Object(r.lerp)(this.speed, this.speedTarget, 2 * e), this.speed2 = Object(r.lerp)(this.speed2, this.speedTarget2, 2 * e), this.easeY = Object(r.lerp)(this.easeY, this.y, 5 * e), this.parallaxEasedY = Object(r.lerp)(this.parallaxEasedY, this.y, 4 * e), this.vs && !this.vslocked && setTimeout(() => {
                const e = Math.round(100 * this.easeY) / 100;
                this.wrapper.style.transform = `translate3d(0px, -${e}px, 0px)`, this.fixedContainer && (this.fixedContainer.style.transform = `translate3d(0px, ${e}px, 0px)`)
            }, 0)
        }
    };
    const l = new class {
        constructor() {
            this.width = this.calculateWidth(), this.height = this.calculateHeight(), this.ratio = this.width / this.height, this.onResize = this.onResize.bind(this), this.onResize(), window.addEventListener("resize", function(e, t, n) {
                var i;
                return function() {
                    var s = this,
                        o = arguments,
                        r = n && !i;
                    clearTimeout(i), i = setTimeout(function() {
                        i = null, n || e.apply(s, o)
                    }, t), r && e.apply(s, o)
                }
            }(this.onResize, 300))
        }
        calculateWidth() {
            return window.innerWidth
        }
        calculateHeight() {
            return window.innerHeight
        }
        onResize(e = !0) {
            this.width = this.calculateWidth(), this.height = this.calculateHeight(), this.ratio = this.width / this.height, i.b.trigger({
                name: "resize",
                fireAtStart: !0
            }, {
                width: this.width,
                height: this.height,
                ratio: this.ratio
            })
        }
    };
    var u = n(0),
        c = n(9);
    const h = new class {
        constructor() {
            this.x = 0, this.y = 0, this.isTouching = !0, this.distance = 0, this.hold = new u.Vector2, this.last = new u.Vector2, this.delta = new u.Vector2, this.move = new u.Vector2, this.world = new u.Vector3, this.normalized = new u.Vector2, this._tmp = new u.Vector3, this.bind()
        }
        bind() {
            const e = window;
            e.addEventListener("touchstart", this.onStart.bind(this), {
                passive: !1
            }), e.addEventListener("touchmove", this.onMove.bind(this), {
                passive: !1
            }), e.addEventListener("touchend", this.onEnd.bind(this), {
                passive: !1
            }), e.addEventListener("touchcancel", this.onEnd.bind(this), {
                passive: !1
            }), e.addEventListener("mousedown", this.onStart.bind(this)), e.addEventListener("mousemove", this.onMove.bind(this)), e.addEventListener("mouseup", this.onEnd.bind(this)), e.addEventListener("contextmenu", this.onEnd.bind(this))
        }
        convertEvent(e) {
            const t = {
                x: 0,
                y: 0
            };
            return e ? e.windowsPointer ? e : (e.touches || e.changedTouches ? e.touches.length ? (t.x = e.touches[0].clientX, t.y = e.touches[0].clientY) : (t.x = e.changedTouches[0].clientX, t.y = e.changedTouches[0].clientY) : (t.x = e.clientX, t.y = e.clientY), t.x = Object(r.clamp)(0, l.width, t.x), t.y = Object(r.clamp)(0, l.height, t.y), t) : t
        }
        onStart(e) {
            const t = this.convertEvent(e);
            this.isTouching = !0, this.x = t.x, this.y = t.y, this.hold.set(t.x, t.y), this.last.set(t.x, t.y), this.delta.set(0, 0), this.move.set(0, 0), this.normalized.x = this.x / l.width * 2 - 1, this.normalized.y = -this.y / l.height * 2 + 1, this.distance = 0, i.b.trigger({
                name: "pointerStart"
            }, {
                pointer: this
            })
        }
        onMove(e) {
            const t = this.convertEvent(e);
            this.isTouching && (this.move.x = t.x - this.hold.x, this.move.y = t.y - this.hold.y), this.x = t.x, this.y = t.y, this.delta.x = t.x - this.last.x, this.delta.y = t.y - this.last.y, this.last.set(this.x, this.y), this.distance += this.delta.length(), this.normalized.x = this.x / l.width * 2 - 1, this.normalized.y = -this.y / l.height * 2 + 1, this._tmp.x = this.normalized.x, this._tmp.y = this.normalized.y, this._tmp.z = .5, this._tmp.unproject(c.a);
            const n = this._tmp.sub(c.a.position).normalize(),
                s = -c.a.position.z / n.z;
            this.world.copy(c.a.position).add(n.multiplyScalar(s)), i.b.trigger({
                name: "pointerMove"
            }, {
                pointer: this
            }), this.isTouching && i.b.trigger({
                name: "pointerDrag"
            }, {
                pointer: this
            })
        }
        onEnd() {
            this.isTouching = !1, this.move.set(0, 0), i.b.trigger({
                name: "pointerEnd"
            }, {
                pointer: this
            })
        }
    };
    const d = new class {
        constructor() {
            this.isFocus = !0, this.onVisibilityChange(), this.bind()
        }
        bind() {
            this.onVisibilityChange = this.onVisibilityChange.bind(this), this.onFocus = this.onFocus.bind(this), this.onBlur = this.onBlur.bind(this), document.addEventListener("visibilitychange", this.onVisibilityChange), window.addEventListener("focus", this.onFocus), window.addEventListener("blur", this.onBlur)
        }
        isHidden() {
            return document.hidden
        }
        onVisibilityChange() {
            i.b.trigger({
                name: "visibilitychange",
                fireAtStart: !0
            }, {
                hidden: this.isHidden()
            })
        }
        onFocus() {
            i.b.trigger({
                name: "focus",
                fireAtStart: !0
            }, {}), this.isFocus = !0
        }
        onBlur() {
            i.b.trigger({
                name: "blur",
                fireAtStart: !0
            }, {}), this.isFocus = !1
        }
    };
    n.d(t, !1, function() {
        return o
    }), n.d(t, "c", function() {
        return l
    }), n.d(t, "a", function() {
        return h
    }), n.d(t, "d", function() {
        return d
    }), n.d(t, "b", function() {
        return a
    })
}, , , function(module, __webpack_exports__, __webpack_require__) {
    "use strict";
    var detect_ua__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50),
        detect_ua__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(detect_ua__WEBPACK_IMPORTED_MODULE_0__);
    const device = new detect_ua__WEBPACK_IMPORTED_MODULE_0__.DetectUA,
        MAX_DPR = 1,
        dpr = Math.min(MAX_DPR, window.devicePixelRatio || 1),
        settings = {
            dpr: dpr,
            fxaa: !1,
            dom: device.isDesktop,
            device: device,
            boarding: !0,
            lottie: !0,
            bodymovin: !1,
            particles: !0,
            orbit: !1
        },
        search = window.location.search;
    "Internet Explorer" !== device.browser.name && "Microsoft Edge" !== device.browser.name || (settings.boarding = !1, settings.dom = !1), "Internet Explorer" === device.browser.name && document.documentElement.classList.add("show-notsupported");
    for (const k in settings) {
        const re = new RegExp(`${k}=(.+?);`),
            match = search.match(re);
        match && (settings[k] = eval(match[1]))
    }
    settings.dom || document.documentElement.classList.add("static"), __webpack_exports__.a = settings
}, , , function(e, t, n) {
    "use strict";
    var i = n(0),
        s = n(18),
        o = n(12),
        r = (n(1), n(8));
    const a = new i.PlaneBufferGeometry(1, 1),
        l = new i.RawShaderMaterial({
            transparent: !0,
            depthTest: !1,
            depthWrite: !1,
            alphaTest: !1,
            vertexShader: "\n    precision highp float;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    attribute vec3 position;\n    attribute vec2 uv;\n    varying vec2 vUv;\n\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",
            fragmentShader: "\n    precision highp float;\n\n    uniform sampler2D uTexture;\n    varying vec2 vUv;\n\n    void main() {\n      gl_FragColor = texture2D(uTexture, vUv);\n      gl_FragColor.a = 0.0;\n    }\n  "
        });
    t.a = new class {
        constructor() {
            this.textures = {}
        }
        init() {}
        texReady(e) {
            e.anisotropy = o.a.capabilities.getMaxAnisotropy(), e.needsUpdate = !0;
            const t = l.clone();
            t.uniforms = {
                uTexture: {
                    value: e
                }
            };
            const n = new i.Mesh(a, t);
            n.frustumCulled = !1, r.a.add(n), requestAnimationFrame(() => {
                r.a.remove(n)
            })
        }
        fromAsset(e, t = {}) {
            if (this.textures[e]) return this.textures[e];
            this.textures[e] = new i.Texture;
            for (const n in t) this.textures[e][n] = t[n];
            return s.a.resources[e].loading.then(t => {
                this.textures[e].image = t.meta.data, this.texReady(this.textures[e])
            }), this.textures[e]
        }
        fromImg(e, t = {}) {
            const n = e.currentSrc || e.src;
            if (this.textures[n]) return this.textures[n];
            this.textures[n] = new i.Texture, this.textures[n].image = e;
            for (const e in t) this.textures[n][e] = t[e];
            return e.complete && e.naturalWidth ? this.texReady(this.textures[n]) : (e.onload = (() => {
                this.texReady(this.textures[n])
            }), e.onerror = e.onabort = (() => {})), this.textures[n]
        }
    }
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        s = n(3),
        o = n(2),
        r = n(1),
        a = n(9),
        l = n(7),
        u = n(10),
        c = n(17),
        h = n(19);
    const d = document.querySelector(".site");
    var m = class extends(Object(s.a)(i.Object3D)) {
            init() {
                this.geometry = new i.PlaneBufferGeometry(1, 1, 1, 1), this.material = new i.RawShaderMaterial({
                    fragmentShader: n(158).default,
                    vertexShader: n(157).default,
                    transparent: !0,
                    uniforms: {
                        uTexture: {
                            value: l.a.fromAsset("boardingLogo")
                        },
                        uNoise: {
                            value: l.a.fromAsset("wind", {
                                magFilter: i.NearestFilter,
                                minFilter: i.NearestFilter,
                                wrapS: i.RepeatWrapping,
                                wrapT: i.RepeatWrapping
                            })
                        },
                        uForce: {
                            value: .5
                        },
                        uOpacity: {
                            value: 0
                        }
                    }
                }), this.logo = new i.Mesh(this.geometry, this.material), this.logo.position.z = 3, this.add(this.logo), this.textMaterial = this.material.clone(), this.textMaterial.uniforms = {
                    uTexture: {
                        value: l.a.fromAsset("boardingLogo")
                    },
                    uNoise: {
                        value: l.a.fromAsset("wind", {
                            magFilter: i.NearestFilter,
                            minFilter: i.NearestFilter,
                            wrapS: i.RepeatWrapping,
                            wrapT: i.RepeatWrapping
                        })
                    },
                    uForce: {
                        value: 0
                    },
                    uOpacity: {
                        value: 0
                    }
                }, this.textMaterial.uniforms.uTexture.value = l.a.fromAsset("boardingText"), this.text = new i.Mesh(this.geometry, this.textMaterial), this.text.position.z = 3, this.add(this.text), this.glitchGeometry = new i.PlaneBufferGeometry(1, 1, 1, 1), this.glitchMaterial = new i.RawShaderMaterial({
                    fragmentShader: n(47).default,
                    vertexShader: n(46).default,
                    transparent: !0,
                    depthWrite: !1,
                    uniforms: {
                        uTime: {
                            value: 0
                        },
                        uUv: {
                            value: h.a.target
                        },
                        uFadeTop: {
                            value: !1
                        },
                        uFadeBottom: {
                            value: !1
                        },
                        uScroll: {
                            value: 0
                        },
                        uOpacity: {
                            value: 1
                        },
                        uTexture: {
                            value: l.a.fromAsset("bgglitch", {
                                magFilter: i.NearestFilter,
                                minFilter: i.NearestFilter
                            })
                        }
                    }
                }), this.glitchMesh = new i.Mesh(this.glitchGeometry, this.glitchMaterial), this.glitchMesh.position.z = 2.9, this.add(this.glitchMesh)
            }
            onLoadEnd() {
                d.style.opacity = 0;
                const e = new o.TimelineMax({
                    delay: 0,
                    onComplete: () => {
                        r.b.vslocked = !1, r.b.onLoadEnd(), s.b.trigger({
                            name: "boardingEnd"
                        }), this.parent && this.parent.remove(this), this.visible = !1, window.setTimeout(() => {
                            r.c.onResize()
                        }, 500)
                    }
                });
                e.timeScale(1.2);
                const t = .5 * this.logoCam.height + this.logo.scale.y / 2;
                e.set(this.material.uniforms.uOpacity, {
                    value: 1
                }, 0), e.fromTo(this.logo.position, 3, {
                    y: -t
                }, {
                    y: t,
                    ease: o.SlowMo.ease.config(.1, .9, !1)
                }), e.fromTo(this.material.uniforms.uForce, 3, {
                    value: 1
                }, {
                    value: 0,
                    ease: "Power4.easeOut"
                }, 0), e.add(() => {
                    u.a.material.uniforms.uGlitch.value = .7
                }, 1.6), e.add(() => {
                    u.a.material.uniforms.uGlitch.value = 0
                }, 1.7), e.add("text", 2.2), e.set(this.textMaterial.uniforms.uOpacity, {
                    value: 1
                }, "text"), e.fromTo(this.text.position, 3, {
                    y: -t
                }, {
                    y: t,
                    ease: o.SlowMo.ease.config(.1, .9, !1)
                }, "text"), e.fromTo(this.textMaterial.uniforms.uForce, 3, {
                    value: 1
                }, {
                    value: 0,
                    ease: "Power4.easeOut"
                }, "text"), e.add(() => {
                    u.a.material.uniforms.uGlitch.value = .7
                }, "text+=1.6"), e.add(() => {
                    u.a.material.uniforms.uGlitch.value = 0
                }, "text+=1.7"), e.add("fadeout", "text+=2.5"), e.add(() => {
                    u.a.material.uniforms.uGlitch.value = 1
                }, "fadeout+=0.2"), e.add(() => {
                    u.a.material.uniforms.uGlitch.value = 0
                }, "fadeout+=0.9"), e.add(() => {
                    s.b.trigger({
                        name: "enterAnim"
                    })
                }, "fadeout"), e.to(this.glitchMaterial.uniforms.uOpacity, .8, {
                    value: 0,
                    ease: "Power4.easeInOut"
                }, "fadeout"), e.to(d, .8, {
                    opacity: 1,
                    ease: "Power4.easeInOut"
                }, "fadeout");
                const n = document.querySelector(".home__intro");
                if (r.c.width >= 768 && n) {
                    const t = n.querySelectorAll(".line span"),
                        i = document.querySelectorAll(".nav__logo, .nav__list__first li, .nav__toggler, .nav__button span"),
                        s = document.querySelectorAll(".home__event text-appear span"),
                        r = document.querySelectorAll(".home__event__line.linet"),
                        a = document.querySelectorAll(".home__event__line.liner"),
                        l = document.querySelectorAll(".home__event__line.lineb"),
                        u = document.querySelectorAll(".home__event__line.linel"),
                        h = document.querySelectorAll(".home__event__line.linem"),
                        d = document.querySelector(".home__quicklinks"),
                        m = document.querySelector(".home__intro .button"),
                        p = m.querySelector("span"),
                        v = m.querySelector("svg"),
                        f = c.a.getInstanceFromEl(m),
                        g = document.querySelector(".cookiebar"),
                        x = g.querySelectorAll(".line span");
                    f.material.uniforms.uClipping.value = 0, o.TweenMax.set([t, s], {
                        yPercent: 100
                    }), o.TweenMax.set(i, {
                        y: -50
                    }), o.TweenMax.set([r, l], {
                        width: "0%"
                    }), o.TweenMax.set([a, u, h], {
                        height: "0%"
                    }), o.TweenMax.set(d, {
                        opacity: 0
                    }), o.TweenMax.set(m, {
                        overflow: "hidden"
                    }), o.TweenMax.set(p, {
                        y: 55
                    }), o.TweenMax.set(g, {
                        y: 125
                    }), o.TweenMax.set(x, {
                        yPercent: 100
                    });
                    const y = g.querySelector(".first span"),
                        w = g.querySelector(".second span");
                    e.add(() => {
                        const e = new o.TimelineMax;
                        e.staggerFromTo(i, 2, {
                            y: -50
                        }, {
                            y: 0,
                            ease: "Power4.easeOut"
                        }, .02, 0), e.staggerFromTo(t, 2, {
                            yPercent: 100
                        }, {
                            yPercent: 0,
                            ease: "Power4.easeOut"
                        }, .2, 0), e.staggerFromTo(s, 2, {
                            yPercent: 100
                        }, {
                            yPercent: 0,
                            ease: "Power4.easeOut"
                        }, .2, .7), e.staggerFromTo([r, l], 2, {
                            width: "0%"
                        }, {
                            width: "100%",
                            ease: "Power4.easeInOut"
                        }, .1, .3), e.staggerFromTo([a, u, h], 2, {
                            height: "0%"
                        }, {
                            height: "100%",
                            ease: "Power4.easeInOut"
                        }, .1, .3), e.fromTo(f.material.uniforms.uClipping, 1, {
                            value: 0
                        }, {
                            value: 1,
                            ease: "Power4.easeOut"
                        }, 1.4), e.fromTo(p, 2, {
                            y: 55
                        }, {
                            y: 0,
                            ease: "Power4.easeOut"
                        }, 1.8), e.fromTo(v, 2.1, {
                            y: 30
                        }, {
                            y: 0,
                            ease: "Power4.easeOut"
                        }, 1.8), e.fromTo(g, 1, {
                            y: 125
                        }, {
                            y: 0,
                            ease: "Power4.easeOut"
                        }, 2.2), e.staggerFromTo(x, 1, {
                            yPercent: 100
                        }, {
                            yPercent: 0,
                            ease: "Power4.easeOut"
                        }, .2, 2.4), e.fromTo(y, .4, {
                            scaleX: 0
                        }, {
                            scaleX: 1,
                            ease: "Power4.easeOut"
                        }, 2.8), e.fromTo(w, .4, {
                            scaleX: 0
                        }, {
                            scaleX: 1,
                            ease: "Power4.easeOut"
                        }, 2.8), e.from(y, .92, {
                            rotation: 45,
                            ease: "Power4.easeInOut"
                        }, 3), e.from(w, 1, {
                            rotation: -45,
                            ease: "Power4.easeInOut"
                        }, 3), e.fromTo(d, 1, {
                            y: 0,
                            opacity: 0
                        }, {
                            y: 0,
                            opacity: 1,
                            ease: "Power4.easeOut"
                        }, 2)
                    }, "fadeout+=0.1")
                } else if (r.c.width >= 768) {
                    const t = document.querySelectorAll(".nav__logo, .nav__list__first li, .nav__toggler, .nav__button span");
                    o.TweenMax.set(t, {
                        y: -50
                    }), e.add(() => {
                        (new o.TimelineMax).staggerFromTo(t, 2, {
                            y: -50
                        }, {
                            y: 0,
                            ease: "Power4.easeOut"
                        }, .02, 0)
                    }, "fadeout+=0.1")
                }
            }
            onResize() {
                const e = a.a.calculateUnitSize(a.a.position.z - this.logo.position.z);
                this.logoCam = e, this.logo.scale.x = .6 * e.width, this.logo.scale.y = this.logo.scale.x / 2, this.text.scale.copy(this.logo.scale);
                const t = a.a.calculateUnitSize(a.a.position.z - this.glitchMesh.position.z);
                this.glitchMesh.scale.x = t.width, this.glitchMesh.scale.y = this.glitchMesh.scale.x / (1680 / 1507), this.glitchMesh.position.y = t.height / 2 - this.glitchMesh.scale.y / 2
            }
            onRaf({
                delta: e
            }) {
                this.visible && (this.glitchMaterial.uniforms.uTime.value += e, this.glitchMaterial.uniforms.uUv.value = h.a.target)
            }
        },
        p = n(11),
        v = n(15),
        f = n(12);
    class g extends(Object(s.a)(i.Object3D)) {
        init() {
            this.geometry = new i.BufferGeometry;
            const e = new Float32Array(1024),
                t = new Float32Array(256);
            for (let t = 0; t < 1024; t += 4) e[t + 0] = Object(p.randomFloat)(-5, 5), e[t + 1] = Object(p.randomFloat)(-5, 5), e[t + 2] = Object(p.randomFloat)(-5, 5), e[t + 3] = Object(p.randomFloat)(0, 4);
            for (let e = 0; e < 256; e++) t[e] = e / 256;
            this.geometry.addAttribute("position", new i.BufferAttribute(t, 1)), this.fbo = new v.a({
                data: e,
                width: 256,
                height: 1,
                name: "particles fbo",
                shader: n(156).default,
                uniforms: {
                    uTime: {
                        value: 0
                    },
                    uPointer: {
                        value: r.a.normalized
                    },
                    uSpeed: {
                        value: r.b.speed
                    }
                }
            }), this.material = new i.RawShaderMaterial({
                name: "Particles",
                fragmentShader: n(155).default,
                vertexShader: n(154).default,
                transparent: !0,
                uniforms: {
                    uTime: {
                        value: 0
                    },
                    uData: {
                        value: this.fbo.target
                    }
                }
            }), this.mesh = new i.Points(this.geometry, this.material), this.mesh.frustumCulled = !1;
            this.scene = new i.Scene, this.rt = new i.WebGLRenderTarget(512, 512, {}), this.scene.add(this.mesh), this.buffer = new v.a({
                geometry: this.geometry,
                width: 512,
                height: 512,
                name: "buffer particles",
                shader: n(153).default,
                uniforms: {
                    uTime: {
                        value: 0
                    },
                    uImage: {
                        value: this.rt.texture
                    },
                    uSpeed: {
                        value: r.b.speed
                    }
                },
                rtOptions: {
                    minFilter: i.LinearFilter,
                    magFilter: i.LinearFilter,
                    type: i.UnsignedByteType,
                    depthBuffer: !0,
                    depthWrite: !0,
                    depthTest: !0
                }
            }), this.plane = new i.PlaneBufferGeometry(1, 1, 1, 1), this.viewerMaterial = new i.RawShaderMaterial({
                blending: i.AdditiveBlending,
                vertexShader: n(152).default,
                fragmentShader: n(151).default,
                transparent: !0,
                depthWrite: !1,
                uniforms: {
                    uTexture: {
                        value: this.buffer.target
                    },
                    uTime: {
                        value: 0
                    }
                }
            }), this.viewer = new i.Mesh(this.plane, this.viewerMaterial), this.add(this.viewer), this.viewer.position.z = -1
        }
        onResize() {
            const e = a.a.calculateUnitSize(a.a.position.z - this.viewer.position.z);
            this.viewer.scale.set(e.width, e.height, 1)
        }
        draw({
            delta: e
        }) {
            this.fbo.uniforms.uTime.value += e, this.fbo.uniforms.uSpeed.value = r.b.speed2, this.fbo.update(), this.material.uniforms.uTime.value += e, this.material.uniforms.uData.value = this.fbo.target, f.a.setRenderTarget(this.rt), f.a.render(this.scene, a.a), f.a.setRenderTarget(null), this.buffer.uniforms.uSpeed.value = r.b.speed2, this.buffer.update(), this.viewerMaterial.uniforms.uTexture.value = this.buffer.target
        }
        onRaf({
            delta: e
        }) {
            this.viewerMaterial.uniforms.uTime.value += e, this.draw({
                delta: e
            })
        }
    }
    var x = n(4);
    t.a = new class extends(Object(s.a)(i.Scene)) {
        init() {
            this.background = new i.Color(277), x.a.boarding && this.add(new m), x.a.particles && this.add(new g), this.add(a.a)
        }
    }
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        s = n(3),
        o = n(49),
        r = n.n(o),
        a = n(12),
        l = n(4);
    t.a = new class extends(Object(s.a)(i.PerspectiveCamera)) {
        constructor() {
            super(35, 0, .1, 500)
        }
        init() {
            this.position.set(0, 0, 10), this.lookAt(new i.Vector3(0, 0, 0)), l.a.orbit && this.initOrbitControl()
        }
        initOrbitControl() {
            const e = new r.a(this, a.a.domElement);
            e.enabled = !0, e.maxDistance = 1500, e.minDistance = 0, document.querySelector(".canvas").style.zIndex = 10
        }
        calculateUnitSize(e = this.position.z) {
            const t = this.fov * Math.PI / 180,
                n = 2 * Math.tan(t / 2) * e;
            return {
                width: n * this.aspect,
                height: n
            }
        }
        onResize({
            ratio: e
        }) {
            this.aspect = e, this.unit = this.calculateUnitSize(), this.updateProjectionMatrix()
        }
    }
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        s = n(3),
        o = n(1),
        r = n(12),
        a = n(4),
        l = n(28),
        u = n(13);
    const c = n(161).default,
        h = n(160).default;
    t.a = new class extends(Object(s.a)()) {
        init() {
            this.renderer = r.a, this.scene = new i.Scene, this.dummyCamera = new i.Camera, this.resolution = new i.Vector2, this.renderer.getDrawingBufferSize(this.resolution), this.target = new i.WebGLRenderTarget(this.resolution.x, this.resolution.y, {
                format: i.RGBFormat,
                stencilBuffer: !1,
                depthBuffer: !0
            }), this.target.texture.wrapS = i.RepeatWrapping, this.target.texture.wrapT = i.RepeatWrapping;
            const e = {};
            a.a.fxaa && (e.FXAA = !0), this.material = new i.RawShaderMaterial({
                defines: e,
                fragmentShader: h,
                vertexShader: c,
                uniforms: {
                    uScene: {
                        value: this.target.texture
                    },
                    uResolution: {
                        value: this.resolution
                    },
                    uTrail: {
                        value: u.a.fbo.target
                    },
                    uTime: {
                        value: 0
                    },
                    uSpeed: {
                        value: 0
                    },
                    uRectSmall: {
                        value: new i.Vector4(0, 0, 0, 0)
                    },
                    uGlitch: {
                        value: 0
                    },
                    uSmallGlitch: {
                        value: 0
                    },
                    uDarken: {
                        value: 0
                    }
                }
            }), this.triangle = new i.Mesh(l.a, this.material), this.triangle.frustumCulled = !1, this.scene.add(this.triangle), this.timer = 0
        }
        setSmallGlitch(e, t = .03) {
            const n = e.getBoundingClientRect(),
                i = n.width / o.c.width,
                s = n.height / o.c.height;
            this.material.uniforms.uRectSmall.value.set(n.left / o.c.width - t, 1 - n.bottom / o.c.height - t, n.left / o.c.width + i + t, 1 - n.bottom / o.c.height + s + t), this.material.uniforms.uSmallGlitch.value = 1
        }
        resetSmallGlitch() {
            this.material.uniforms.uRectSmall.value.setScalar(0), this.material.uniforms.uSmallGlitch.value = 0
        }
        onResize() {
            this.renderer.getDrawingBufferSize(this.resolution), this.target.setSize(this.resolution.x, this.resolution.y)
        }
        render(e, t) {
            this.renderer.setRenderTarget(this.target), this.renderer.render(e, t), this.renderer.setRenderTarget(null), this.renderer.render(this.scene, this.dummyCamera)
        }
        onRaf({
            delta: e
        }) {
            this.timer += e, this.material.uniforms.uTime.value += .1 * e, this.material.uniforms.uTrail.value = u.a.fbo.target, this.material.uniforms.uSpeed.value = o.b.speed
        }
    }
}, , function(e, t, n) {
    "use strict";
    var i = n(0),
        s = n(3),
        o = n(4);
    t.a = new class extends(Object(s.a)(i.WebGLRenderer)) {
        constructor() {
            super({
                powerPreference: "high-performance",
                antialiasing: !1
            }), this.debug.checkShaderErrors = !1, this.setPixelRatio(o.a.dpr)
        }
        onResize({
            width: e,
            height: t
        }) {
            this.setSize(e, t)
        }
    }
}, function(e, t, n) {
    "use strict";
    var i = n(3),
        s = n(1),
        o = n(15),
        r = (n(18), n(0));
    t.a = new class extends(Object(i.a)()) {
        init() {
            this.fbo = new o.a({
                width: 256,
                height: 256,
                name: "trail",
                shader: n(162).default,
                uniforms: {
                    uRatio: {
                        value: 1
                    },
                    uPointer: {
                        value: new r.Vector2
                    },
                    uPrevPointer: {
                        value: new r.Vector2
                    },
                    uRect: {
                        value: new r.Vector4
                    },
                    uRectForce: {
                        value: 0
                    },
                    uSpeed: {
                        value: 0
                    }
                },
                rtOptions: {
                    minFilter: r.LinearFilter,
                    magFilter: r.LinearFilter
                }
            }), this.speed = 0, this.pointerTarget = new r.Vector2
        }
        onResize({
            ratio: e
        }) {
            this.fbo.uniforms.uRatio.value = e
        }
        onPointerMove({
            pointer: e
        }) {
            this.pointerTarget.set(e.x / window.innerWidth, 1 - e.y / window.innerHeight)
        }
        onRaf({
            delta: e
        }) {
            this.fbo.uniforms.uPrevPointer.value.copy(this.fbo.uniforms.uPointer.value), this.fbo.uniforms.uPointer.value.lerp(this.pointerTarget, .2), this.fbo.uniforms.uSpeed.value = this.speed, this.fbo.update();
            const t = .005 * Math.max(Math.abs(s.a.delta.x), Math.abs(s.a.delta.y));
            this.speed += Math.min(t, .1), this.speed *= .9, this.speed = Math.min(2, this.speed), s.d.isFocus || (this.speed = 0)
        }
    }
}, , function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return c
    });
    var i = n(0),
        s = n(12),
        o = n(9),
        r = n(28);

    function a(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(e);
            t && (i = i.filter(function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable
            })), n.push.apply(n, i)
        }
        return n
    }

    function l(e, t, n) {
        return t in e ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = n, e
    }(() => {
        const e = s.a.getContext();
        !!e.getExtension("OES_texture_float") && e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS)
    })();
    const u = /(iPad|iPhone|iPod)/g.test(navigator.userAgent) ? i.HalfFloatType : i.FloatType;
    class c {
        constructor({
            width: e,
            height: t,
            data: n,
            name: o,
            shader: u,
            texture: c,
            uniforms: h = {},
            rtOptions: d = {},
            debug: m = !1
        }) {
            this.options = arguments[0], this.renderer = s.a, this.camera = new i.Camera, this.scene = new i.Scene, this.index = 0, this.copyData = !0, this.texture = c || new i.DataTexture(n || new Float32Array(e * t * 4), e, t, i.RGBAFormat, i.FloatType), this.texture.needsUpdate = !0, this.rt = [this.createRT(), this.createRT()], this.material = new i.RawShaderMaterial({
                name: o || "FBO",
                defines: {
                    RESOLUTION: `vec2(${e.toFixed(1)}, ${t.toFixed(1)})`
                },
                uniforms: function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = null != arguments[t] ? arguments[t] : {};
                        t % 2 ? a(Object(n), !0).forEach(function(t) {
                            l(e, t, n[t])
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : a(Object(n)).forEach(function(t) {
                            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t))
                        })
                    }
                    return e
                }({}, h, {
                    texture: {
                        value: this.texture
                    }
                }),
                vertexShader: "\n        precision highp float;\n        attribute vec3 position;\n\n        void main() {\n          gl_Position = vec4(position, 1.0);\n        }\n      ",
                fragmentShader: u || "\n        precision highp float;\n        uniform sampler2D texture;\n\n        void main() {\n          vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n          gl_FragColor = texture2D(texture, uv);\n        }\n      "
            }), this.mesh = new i.Mesh(r.a, this.material), this.mesh.frustumCulled = !1, this.scene.add(this.mesh), this.options.debug && this.initDebug()
        }
        initDebug() {
            this.debugGeometry = new i.PlaneBufferGeometry(2, 2), this.debugMaterial = new i.MeshBasicMaterial({
                map: this.target
            }), this.debugMesh = new i.Mesh(this.debugGeometry, this.debugMaterial), this.debugMesh.position.set(0, 0, -5), o.a.add(this.debugMesh)
        }
        createRT() {
            return new i.WebGLRenderTarget(this.options.width, this.options.height, Object.assign({
                minFilter: i.NearestFilter,
                magFilter: i.NearestFilter,
                stencilBuffer: !1,
                depthBuffer: !1,
                depthWrite: !1,
                depthTest: !1,
                type: u
            }, this.options.rtOptions))
        }
        get target() {
            return this.rt[this.index].texture
        }
        get uniforms() {
            return this.material.uniforms
        }
        resize(e, t) {
            this.material.defines.RESOLUTION = `vec2(${e.toFixed(1)}, ${t.toFixed(1)})`, this.options.width = e, this.options.height = t, this.rt.forEach(n => {
                n.setSize(e, t)
            })
        }
        update(e = !0) {
            const t = 0 === this.index ? 1 : 0,
                n = this.rt[this.index],
                i = this.rt[t];
            this.material.uniforms.texture.value = this.copyData ? this.texture : n.texture;
            const s = this.renderer.getRenderTarget();
            this.renderer.setRenderTarget(i), this.renderer.render(this.scene, this.camera), e && this.renderer.setRenderTarget(s), this.index = t, this.copyData = !1
        }
    }
}, , function(e, t, n) {
    "use strict";
    var i = n(0),
        s = n(2),
        o = n(3),
        r = n(1),
        a = n(9),
        l = (n(11), class extends(Object(o.a)(i.Object3D)) {
            init() {
                this.element = this._args[0], this.isFixed = this.element.dataset.fixed, this.speed = parseFloat(this.element.dataset.parallax), this.isParallax = !!this.speed, this.track = !0, this.parallaxmid = this.element.dataset.parallaxmid
            }
            onResize() {
                if (!this.track) return;
                if (!this.element) return;
                const e = this.element.getBoundingClientRect();
                this.bounds = {
                    left: e.left,
                    top: e.top,
                    width: e.width,
                    height: e.height
                }, this.isFixed || (this.bounds.top += r.b.vs ? r.b.easeY : r.b.y), this.updateSize(), this.updatePosition()
            }
            updateSize() {
                if (!this.track) return;
                this.camUnit = a.a.calculateUnitSize(a.a.position.z - this.position.z);
                const e = this.bounds.width / r.c.width,
                    t = this.bounds.height / r.c.height;
                e && t && (this.scale.x = this.camUnit.width * e, this.scale.y = this.camUnit.height * t)
            }
            updatePosition(e = (r.b.vs ? r.b.easeY : r.b.y)) {
                if (!this.track) return;
                const t = this.isFixed ? 0 : e;
                this.position.x = -this.camUnit.width / 2 + this.scale.x / 2, this.position.y = this.camUnit.height / 2 - this.scale.y / 2, this.position.x += this.bounds.left / r.c.width * this.camUnit.width, this.position.y -= (this.bounds.top - t) / r.c.height * this.camUnit.height
            }
            updateParallax(e) {
                if (!(r.c.width < 1024))
                    if (this.parallaxmid) {
                        const t = (e - (this.bounds.top + this.bounds.height / 2) + r.c.height) / (this.bounds.height + r.c.height) * this.speed;
                        this.position.y += t
                    } else this.position.y += e * (2e-4 * this.speed) * this.camUnit.height
            }
            onRaf() {
                this.track && !r.b.vslocked && (this.updatePosition(r.b.easeY), this.isParallax && this.updateParallax(r.b.parallaxEasedY))
            }
            destroy() {
                this.parent && this.parent.remove(this), this.visible = !1, super.destroy()
            }
        }),
        u = n(8),
        c = n(7),
        h = n(10),
        d = n(6),
        m = n.n(d);
    const p = new i.PlaneBufferGeometry(1, 1, 1, 1),
        v = new i.RawShaderMaterial({
            transparent: !0,
            fragmentShader: n(150).default,
            vertexShader: n(149).default
        });
    const f = new i.PlaneBufferGeometry(1, 1, 1, 1),
        g = new i.RawShaderMaterial({
            fragmentShader: n(148).default,
            vertexShader: n(147).default,
            transparent: !0
        });
    const x = new i.PlaneBufferGeometry(1, 1, 1, 1),
        y = new i.RawShaderMaterial({
            fragmentShader: n(146).default,
            vertexShader: n(145).default,
            transparent: !0
        });
    const w = new i.PlaneBufferGeometry(1, 1, 1, 1),
        b = new i.RawShaderMaterial({
            transparent: !0,
            fragmentShader: n(144).default,
            vertexShader: n(143).default
        });
    const T = new i.PlaneBufferGeometry(1, 1, 1, 1),
        P = new i.RawShaderMaterial({
            blending: i.AdditiveBlending,
            fragmentShader: n(142).default,
            vertexShader: n(141).default,
            transparent: !0,
            depthTest: !1
        });
    const S = new i.PlaneBufferGeometry(1, 1, 1, 1),
        O = new i.RawShaderMaterial({
            blending: i.AdditiveBlending,
            fragmentShader: n(140).default,
            vertexShader: n(139).default
        });
    var M = n(13);
    const _ = new i.PlaneBufferGeometry(1, 1, 5, 5),
        E = new i.RawShaderMaterial({
            transparent: !0,
            depthTest: !1,
            fragmentShader: n(138).default,
            vertexShader: n(137).default
        });
    var F = n(19);
    const L = new i.PlaneBufferGeometry(1, 1, 1, 1),
        R = new i.RawShaderMaterial({
            fragmentShader: n(136).default,
            vertexShader: n(135).default
        });
    const k = {
        button: class extends l {
            init() {
                super.init(), this.geometry = p, this.material = v.clone(), this.material.uniforms = {
                    uTime: {
                        value: 0
                    },
                    uProgress: {
                        value: 0
                    },
                    uWind: {
                        value: c.a.fromAsset("wind")
                    },
                    uShow: {
                        value: 0
                    },
                    uClipping: {
                        value: 1
                    }
                }, this.mesh = new i.Mesh(this.geometry, this.material), this.add(this.mesh), u.a.add(this), this.element.addEventListener("mouseenter", () => {
                    s.TweenMax.to(this.material.uniforms.uProgress, .3, {
                        value: 1,
                        ease: "Power4.easeOut"
                    }), h.a.setSmallGlitch(this.element)
                }), this.element.addEventListener("mouseleave", () => {
                    s.TweenMax.to(this.material.uniforms.uProgress, .2, {
                        value: 0,
                        ease: "Power4.easeOut"
                    }), h.a.resetSmallGlitch()
                }), this.position.z += .01, this.element.classList.contains("nav__button") ? this.material.uniforms.uShow.value = 1 : (m.a.history.previous || this.onEnterAnim(), m.a.hooks.after(() => this.onEnterAnim()), m.a.hooks.before(() => this.onLeaveAnim()))
            }
            onEnterAnim() {
                this.enter || (this.enter = !0, s.TweenMax.to(this.material.uniforms.uShow, .6, {
                    value: 1,
                    ease: "Power4.easeOut"
                }))
            }
            onLeaveAnim() {
                this.enter && s.TweenMax.to(this.material.uniforms.uShow, .6, {
                    value: 0,
                    ease: "Power4.easeIn"
                })
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += .1 * e
            }
        },
        person: class extends l {
            init() {
                super.init(), this.geometry = f, this.material = g.clone();
                const e = this.element.querySelector("img");
                this.material.uniforms = {
                    uTime: {
                        value: 2432.12 * Math.random()
                    },
                    uTexture: {
                        value: c.a.fromImg(e, {
                            wrapS: i.MirroredRepeatWrapping,
                            wrapT: i.MirroredRepeatWrapping
                        })
                    },
                    uRectSize: {
                        value: new i.Vector2
                    },
                    uImageSize: {
                        value: new i.Vector2
                    },
                    uWind: {
                        value: c.a.fromAsset("test", {
                            magFilter: i.NearestFilter,
                            minFilter: i.NearestFilter
                        })
                    },
                    uProgress: {
                        value: 0
                    },
                    uScale: {
                        value: 0
                    },
                    uShow: {
                        value: 0
                    }
                }, this.mesh = new i.Mesh(this.geometry, this.material), this.add(this.mesh), u.a.add(this);
                const t = this.element.parentNode.querySelector(".person__link");
                t.addEventListener("mouseenter", () => {
                    s.TweenMax.to(this.material.uniforms.uProgress, .5, {
                        value: 1,
                        ease: "Power4.easeOut"
                    }), s.TweenMax.to(this.material.uniforms.uScale, 3, {
                        value: 1
                    })
                }), t.addEventListener("mouseleave", () => {
                    s.TweenMax.to(this.material.uniforms.uProgress, .3, {
                        value: 0,
                        ease: "Power4.easeOut"
                    }), s.TweenMax.to(this.material.uniforms.uScale, 2, {
                        value: 0
                    })
                }), m.a.history.previous || this.onEnterAnim(), m.a.hooks.after(() => this.onEnterAnim()), m.a.hooks.before(() => this.onLeaveAnim())
            }
            onEnterAnim() {
                this.enter || (this.enter = !0, s.TweenMax.to(this.material.uniforms.uShow, .6, {
                    value: 1,
                    ease: "Power4.easeOut"
                }))
            }
            onLeaveAnim() {
                this.enter && s.TweenMax.to(this.material.uniforms.uShow, .6, {
                    value: 0,
                    ease: "Power4.easeIn"
                })
            }
            onResize() {
                super.onResize();
                const e = this.material.uniforms.uTexture.value;
                this.material.uniforms.uRectSize.value.set(this.bounds.width, this.bounds.height), this.material.uniforms.uImageSize.value.set(e.image.naturalWidth, e.image.naturalHeight)
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += .1 * e
            }
        },
        cover: class extends l {
            init() {
                super.init(), this.parallax = !0, this.geometry = x, this.material = y.clone();
                const e = this.element;
                this.material.uniforms = {
                    uTime: {
                        value: 0
                    },
                    uTexture: {
                        value: c.a.fromImg(e)
                    },
                    uProgress: {
                        value: 0
                    }
                };
                const t = this.element.dataset.mask;
                if (t) {
                    const e = new Image;
                    this.material.uniforms.uHasMask.value = !0, this.material.uniforms.uMask.value = c.a.fromImg(e), e.src = t
                }
                this.mesh = new i.Mesh(this.geometry, this.material), this.position.z -= .02, this.add(this.mesh), u.a.add(this), m.a.hooks.after(() => this.onEnterAnim()), m.a.hooks.leave(() => this.onLeaveAnim())
            }
            onEnterAnim() {
                this.enter || (this.enter = !0, s.TweenMax.to(this.material.uniforms.uProgress, 15, {
                    value: 1,
                    ease: "Power4.easeOut"
                }))
            }
            onLeaveAnim() {
                this.enter && s.TweenMax.to(this.material.uniforms.uProgress, 2, {
                    value: 0,
                    ease: "Power4.easeIn"
                })
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += .1 * e
            }
        },
        footer: class extends l {
            init() {
                super.init(), this.geometry = w, this.material = b.clone(), this.material.uniforms = {
                    uTime: {
                        value: 0
                    },
                    uShow: {
                        value: 0
                    }
                }, this.mesh = new i.Mesh(this.geometry, this.material), this.mesh.position.z = -1e-4, this.add(this.mesh), u.a.add(this), m.a.history.previous || this.onEnterAnim(), m.a.hooks.after(() => this.onEnterAnim()), m.a.hooks.before(() => this.onLeaveAnim())
            }
            onEnterAnim() {
                this.enter || (this.enter = !0, TweenMax.to(this.material.uniforms.uShow, .6, {
                    value: 1,
                    ease: "Power4.easeOut"
                }))
            }
            onLeaveAnim() {
                this.enter && TweenMax.to(this.material.uniforms.uShow, .6, {
                    value: 0,
                    ease: "Power4.easeIn"
                })
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += .1 * e
            }
        },
        date: class extends l {
            init() {
                super.init(), this.geometry = T, this.material = P.clone();
                const e = this.element.querySelector("img");
                this.material.uniforms = {
                    uTime: {
                        value: 2432.12 * Math.random()
                    },
                    uTexture: {
                        value: c.a.fromImg(e)
                    },
                    uProgress: {
                        value: 0
                    }
                }, this.mesh = new i.Mesh(this.geometry, this.material), this.mesh.position.z = -.01, this.add(this.mesh), u.a.add(this), m.a.history.previous || this.enterAnim(), m.a.hooks.after(() => this.enterAnim()), m.a.hooks.leave(() => this.leaveAnim())
            }
            enterAnim() {
                this.enter || (this.enter = !0, s.TweenMax.to(this.material.uniforms.uProgress, 15, {
                    value: 1,
                    ease: "Power4.easeOut"
                }))
            }
            leaveAnim() {
                this.enter && s.TweenMax.to(this.material.uniforms.uProgress, 2, {
                    value: 0,
                    ease: "Power4.easeIn"
                })
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += .1 * e
            }
        },
        placeholder: class extends l {
            init() {
                super.init(), this.visible = !1
            }
        },
        line: class extends l {
            init() {
                super.init(), this.visible = !1, this.track = !1, this.geometry = S, this.material = O.clone(), this.material.uniforms = {
                    uTime: {
                        value: 0
                    },
                    uProgress: {
                        value: 0
                    }
                }, this.mesh = new i.Mesh(this.geometry, this.material), this.scale.set(.01, .01, 1), this.add(this.mesh), u.a.add(this), window.setTimeout(this.bind.bind(this), 200)
            }
            bind() {
                this.onEnter.bind(this), [...this.element.querySelectorAll("li")].forEach(e => {
                    const t = e.querySelector('[data-type="placeholder"]');
                    if (!t) return;
                    const n = U.getInstanceFromEl(t);
                    e.addEventListener("mouseenter", () => {
                        this.onEnter(n)
                    }), e.addEventListener("mouseleave", () => {
                        this.onLeave(n)
                    })
                })
            }
            onEnter(e) {
                if (!e) return;
                s.TweenMax.killTweensOf([this.position, this.scale]);
                const t = .2 * e.scale.y,
                    n = e.position.y - .8 * e.scale.y;
                this.visible ? s.TweenMax.to(this.position, .4, {
                    x: e.position.x,
                    y: n,
                    z: e.position.z,
                    ease: "Power4.easeOut"
                }) : (s.TweenMax.set(this.position, {
                    x: e.position.x,
                    y: n,
                    z: e.position.z
                }), this.scale.x = .001), this.visible = !0, s.TweenMax.to(this.scale, .4, {
                    x: e.scale.x,
                    y: t,
                    z: e.scale.z,
                    ease: "Power4.easeOut"
                })
            }
            onLeave(e) {
                e && (s.TweenMax.killTweensOf([this.position, this.scale]), s.TweenMax.to(this.scale, .3, {
                    y: .001,
                    ease: "Power4.easeInOut",
                    onComplete: () => {
                        this.visible = !1
                    }
                }))
            }
            onScroll() {
                this.visible && this.onLeave(!0)
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += .1 * e
            }
        },
        listhover: class extends l {
            init() {
                super.init(), this.visible = !1, this.track = !1, this.geometry = _, this.material = E.clone(), this.textures = {}, this.material.uniforms = {
                    uTime: {
                        value: 0
                    },
                    uNoise: {
                        value: c.a.fromAsset("test", {
                            wrapS: i.RepeatWrapping,
                            wrapT: i.RepeatWrapping,
                            magFilter: i.NearestFilter,
                            minFilter: i.NearestFilter
                        })
                    },
                    uTextureA: {
                        value: new i.Texture
                    },
                    uTextureB: {
                        value: new i.Texture
                    },
                    uProgress: {
                        value: 0
                    },
                    uVisibility: {
                        value: 0
                    },
                    uDirection: {
                        value: new i.Vector2
                    }
                }, this.mesh = new i.Mesh(this.geometry, this.material), this.scale.set(0, 0, 1), this.add(this.mesh), u.a.add(this), window.setTimeout(this.bind.bind(this), 200)
            }
            bind() {
                this.onEnter.bind(this), [...this.element.querySelectorAll("li")].forEach(e => {
                    const t = e.querySelector('[data-type="placeholder"]');
                    if (!t) return;
                    const n = U.getInstanceFromEl(t),
                        i = t.dataset.glid,
                        s = t.querySelector("img");
                    this.textures[i] = c.a.fromImg(s), e.addEventListener("mouseenter", () => {
                        this.onEnter(n, e)
                    }), e.addEventListener("mouseleave", () => {
                        this.onLeave(n, e)
                    })
                })
            }
            onEnter(e, t) {
                if (!e) return;
                const n = t.getBoundingClientRect(),
                    i = n.left / r.c.width,
                    o = 1 - (n.top + n.height) / r.c.height,
                    a = n.width / r.c.width,
                    l = n.height / r.c.height;
                M.a.fbo.uniforms.uRect.value.set(o, i, o + l, i + a), M.a.fbo.uniforms.uRectForce.value = 1, s.TweenMax.to(M.a.fbo.uniforms.uRectForce, .3, {
                    value: 0
                }), s.TweenMax.to(this.material.uniforms.uVisibility, 1, {
                    value: 1
                });
                const u = e.element.dataset.glid;
                this.material.uniforms.uTextureA.value = this.material.uniforms.uTextureB.value, this.material.uniforms.uTextureB.value = this.textures[u], this.material.uniforms.uTextureA.value !== this.material.uniforms.uTextureB.value && (s.TweenMax.killTweensOf([this.uProgress]), s.TweenMax.fromTo(this.material.uniforms.uProgress, .5, {
                    value: 0
                }, {
                    value: 1,
                    ease: "Power4.easeOut",
                    onComplete: () => {
                        this.material.uniforms.uTextureA.value = this.material.uniforms.uTextureB.value, this.material.uniforms.uProgress.value = 0
                    }
                })), s.TweenMax.killTweensOf([this.position, this.scale]), this.visible ? s.TweenMax.to(this.position, .5, {
                    x: e.position.x,
                    y: e.position.y,
                    z: e.position.z,
                    ease: "Power4.easeOut"
                }) : (s.TweenMax.set(this.position, {
                    x: e.position.x,
                    y: e.position.y,
                    z: e.position.z
                }), this.scale.x = 0), this.visible = !0, s.TweenMax.to(this.scale, .5, {
                    x: e.scale.x,
                    y: e.scale.y,
                    z: e.scale.z,
                    ease: "Power4.easeOut"
                }), this.material.uniforms.uDirection.value.subVectors(this.position, e.position).normalize()
            }
            onLeave() {
                s.TweenMax.to(this.material.uniforms.uVisibility, .5, {
                    value: 0,
                    ease: "Power4.easeOut"
                })
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += .1 * e
            }
        },
        glitch: class extends l {
            init() {
                super.init(), this.fbo = F.a;
                const e = this.element.querySelector("img");
                this.geometry = new i.PlaneBufferGeometry(1, 1, 1, 1), this.material = new i.RawShaderMaterial({
                    name: "Glitch mesh",
                    fragmentShader: n(47).default,
                    vertexShader: n(46).default,
                    transparent: !0,
                    depthWrite: !1,
                    uniforms: {
                        uTime: {
                            value: 0
                        },
                        uUv: {
                            value: this.fbo.target
                        },
                        uFadeTop: {
                            value: !this.element.dataset.nofadetop
                        },
                        uFadeBottom: {
                            value: !this.element.dataset.nofadebottom
                        },
                        uScroll: {
                            value: 0
                        },
                        uOpacity: {
                            value: 1
                        },
                        uScreen: {
                            value: new i.Vector2(r.c.width, r.c.height)
                        },
                        uTexture: {
                            value: c.a.fromImg(e, {
                                magFilter: i.NearestFilter,
                                minFilter: i.NearestFilter
                            })
                        }
                    }
                }), this.mesh = new i.Mesh(this.geometry, this.material), this.position.z = -5, this.parallaxmid && (this.position.z = -6), this.onResize(), this.add(this.mesh), u.a.add(this)
            }
            onResize() {
                super.onResize(), this.material.uniforms.uScreen.value.set(r.c.width, r.c.height)
            }
            onRaf({
                delta: e
            }) {
                super.onRaf(), this.material.uniforms.uTime.value += e, this.material.uniforms.uUv.value = this.fbo.target, this.material.uniforms.uScroll.value = r.b.parallaxEasedY
            }
        },
        image: class extends l {
            init() {
                super.init(), this.parallax = !0, this.geometry = L, this.material = R.clone();
                const e = this.element;
                this.material.uniforms = {
                    uTime: {
                        value: 0
                    },
                    uTexture: {
                        value: c.a.fromImg(e)
                    }
                }, this.mesh = new i.Mesh(this.geometry, this.material), this.add(this.mesh), u.a.add(this)
            }
        }
    };
    var U = t.a = new class {
        constructor() {
            this.id = 0, this.instances = {}
        }
        register(e) {
            const t = `id_${this.id++}`;
            e.dataset.glid = t;
            const n = e.dataset.type || "button",
                i = new k[n](e);
            this.instances[t] = i, e.classList.add("gl")
        }
        getInstanceFromEl(e) {
            return this.instances[e.dataset.glid]
        }
        unregister(e) {
            const t = this.getInstanceFromEl(e);
            e.classList.remove("gl"), t.destroy()
        }
    }
}, function(e, t, n) {
    "use strict";
    var i = n(34),
        s = n(3),
        o = () => {
            let e = void 0,
                t = void 0;
            const n = new Promise((n, i) => {
                e = n, t = i
            });
            return n.resolve = e, n.reject = t, n
        };
    i.Loader.Resource;
    const r = [{
        name: "uvwind",
        url: `${window.EPICINFO.BASEURL}/assets/images/gl/uv_wind4-96b9803b0c.png`
    }, {
        name: "boardingLogo",
        url: `${window.EPICINFO.BASEURL}/assets/images/gl/boardingLogo-bcc434f041.png`
    }, {
        name: "boardingText",
        url: `${window.EPICINFO.BASEURL}/assets/images/gl/boardingText-cd469e7a6e.png`
    }, {
        name: "wind",
        url: `${window.EPICINFO.BASEURL}/assets/images/gl/wind-45af51941d.jpg`
    }, {
        name: "test",
        url: `${window.EPICINFO.BASEURL}/assets/images/gl/test-a301d29511.png`
    }, {
        name: "bgglitch",
        url: `${window.EPICINFO.BASEURL}/assets/images/bg_we_cargo_header-compressor-f2315e0706.jpg`
    }];
    t.a = new class {
        constructor() {
            this.resources = {}, r.forEach(e => {
                this.resources[e.name] = e, this.resources[e.name].loading = o()
            })
        }
        load() {
            return this.deferred = o(), this.loader = new i.Loader, s.b.trigger({
                name: "loadStart"
            }), r.forEach(e => {
                this.loader.add(e)
            }), this.loader.onProgress.add(this.onProgress.bind(this)), this.loader.load(this.finish.bind(this)), o
        }
        onProgress(e, t) {
            s.b.trigger({
                name: "loadProgress"
            }, {
                progress: this.loader.progress
            });
            const n = this.resources[t.name];
            n.meta = t, n.loading.resolve(n)
        }
        finish() {
            this.deferred.resolve(), s.b.trigger({
                name: "loadEnd"
            }, {
                resources: this.resources
            })
        }
    }
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        s = n(15),
        o = n(7),
        r = n(13),
        a = n(3);
    const l = new s.a({
        width: 1024,
        height: 1024,
        name: "Glitch FBO",
        shader: n(159).default,
        uniforms: {
            uWind: {
                value: o.a.fromAsset("uvwind", {
                    magFilter: i.NearestFilter,
                    minFilter: i.NearestFilter,
                    wrapS: i.RepeatWrapping,
                    wrapT: i.RepeatWrapping
                })
            },
            uTime: {
                value: 0
            },
            uTrail: {
                value: r.a.fbo.target
            }
        }
    });
    a.b.on("raf", ({
        delta: e
    }) => {
        l.uniforms.uTrail.value = r.a.fbo.target, l.uniforms.uTime.value += e, l.update()
    }), t.a = l
}, , , , , , , , , function(e, t, n) {
    "use strict";
    var i = n(0);
    const s = new Float32Array([-1, -1, 3, -1, -1, 3]),
        o = new i.BufferGeometry;
    o.addAttribute("position", new i.BufferAttribute(s, 2)), t.a = o
}, , , , , , , , , , , , , , , , , , function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec3 pos = position;\n\n  // pos.z += 0.3;\n  // pos.z += sin(pos.x + pos.y + uTime) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform sampler2D uTexture;\nuniform sampler2D uUv;\nuniform bool uFadeTop;\nuniform bool uFadeBottom;\nuniform float uTime;\nuniform float uOpacity;\nuniform vec2 uScreen;\nvarying vec2 vUv;\n\nfloat vignette(vec2 uv, float a, float b) {\n  float len = length(uv - vec2(0.28, 0.5));\n  return smoothstep(a, b, len);\n}\n\nvoid main() {\n  // vec2 screenUv = gl_FragCoord.xy / uResolution.xy;\n\n  vec4 uv = texture2D(uUv, vUv);\n  vec3 color = texture2D(uTexture, uv.xy).rgb;\n\n  // color += texture2D(uTexture, uv.xy + vec2(0.0, uScroll * 0.0001)).rgb;\n\n  // color += pow(uv.z * 6.0, 2.0);\n  color *= 0.8;\n\n  // float x = (uv.x * 2.0) + uTime * 0.07;\n  float x = (uv.x * 2.0) + uTime * 0.20;\n  float noise = (sin(x) + sin(2.2 * x + 5.52) + sin(2.9 * x + 0.93) + sin(4.6 * x + 8.94)) / 4.0;\n  noise *= 0.6;\n\n  // color += max(0.0, noise) * 1.0;\n  color *= 1.0 + max(0.0, noise) * 1.0;\n\n  color *= 1.0 + pow(uv.z * 3.0, 1.4);\n\n  // float y = (uv.y * 40.0) + uTime * 0.2;\n  // noise = (sin(y) + cos(2.4 * y + 7.52) + sin(2.9 * y + 0.93) + sin(4.6 * y + 8.94)) / 4.0;\n  // noise *= 0.3;\n\n  // color *= 1.0 + max(0.0, noise) * 1.0;\n\n  // color.rgb *= vignette(vUv, -0.3, 0.5);\n\n  gl_FragColor = vec4(color, uOpacity);\n\n  if (uFadeBottom) {\n    gl_FragColor.a *= smoothstep(0.0, 0.2, vUv.y);\n  }\n\n  if (uFadeTop) {\n    gl_FragColor.a *= 1.0 - smoothstep(0.8, 1.0, vUv.y);\n  }\n\n  // bottom / left fade\n  vec2 sUv = gl_FragCoord.xy / uScreen.xy;\n  float opMask = mix(0.6, 0.0, sUv.x);\n  opMask *= mix(0.5, 0.0, sUv.y);\n  gl_FragColor.rgb *= mix(0.6, 1.0, opMask);\n\n  // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n"
}, , , , , function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(2),
        o = function(e, t, n, i, s, o) {
            if (!e || /^(?:expires|max\-age|path|domain|secure)$/i.test(e)) return !1;
            var r = "";
            if (n) switch (n.constructor) {
                case Number:
                    r = n === 1 / 0 ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + n;
                    break;
                case String:
                    r = "; expires=" + n;
                    break;
                case Date:
                    r = "; expires=" + n.toUTCString()
            }
            return document.cookie = encodeURIComponent(e) + "=" + encodeURIComponent(t) + r + (s ? "; domain=" + s : "") + (i ? "; path=" + i : "") + (o ? "; secure" : ""), !0
        },
        r = function(e) {
            return !!e && new RegExp("(?:^|;\\s*)" + encodeURIComponent(e).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie)
        },
        a = n(6),
        l = n.n(a);
    t.default = class extends i.Component {
        init() {
            if (r("accepted")) this.hide();
            else {
                this.$el.querySelector(".cookiebar__close").addEventListener("click", this.close.bind(this)), l.a.hooks.leave(() => this.close())
            }
        }
        hide() {
            this.hided = !0, this.$el.style.display = "none"
        }
        close() {
            this.hided || s.TweenMax.to(this.$el, .8, {
                transform: "translateY(calc(100% + 20px))",
                ease: "Power4.easeInOut",
                onComplete: () => {
                    this.hide(), o("accepted", "true", 1 / 0, "/")
                }
            })
        }
    }
}, , function(e, t, n) {
    "use strict";
    n.r(t), n(166);
    var i = {
        init() {}
    };
    ! function() {
        var e = document,
            t = e.createElement("script");
        if (!("noModule" in t) && "onbeforeload" in t) {
            var n = !1;
            e.addEventListener("beforeload", function(e) {
                if (e.target === t) n = !0;
                else if (!e.target.hasAttribute("nomodule") || !n) return;
                e.preventDefault()
            }, !0), t.type = "module", t.src = ".", e.head.appendChild(t), t.remove()
        }
    }();
    var s = {
            init() {
                i.init()
            }
        },
        o = n(51),
        r = n.n(o),
        a = () => {
            let e = void 0,
                t = void 0;
            const n = new Promise((n, i) => {
                e = n, t = i
            });
            return n.resolve = e, n.reject = t, n
        },
        l = n(5);

    function u(e, t) {
        if (e.parentNode && "function" == typeof e.parentNode.matches) return e.parentNode.matches(t) ? e.parentNode : u(e.parentNode, t)
    }

    function c(e, t, n, i) {
        ! function(e, t, n, i) {
            e.addEventListener(t, n, Boolean(i))
        }(e, n, function(n) {
            const s = n.target.matches(t) ? n.target : u(n.target, t),
                o = function(e, t) {
                    return (t || document).querySelectorAll(e)
                }(t, e);
            Array.prototype.indexOf.call(o, s) >= 0 && i.call(s, n, s)
        }, "blur" === n || "focus" === n || "mouseenter" === n)
    }
    var h = n(1),
        d = (n(17), n(4)),
        m = n(2);
    class p {
        constructor() {
            this.isOpen = !1, this.isAnimating = !1, this.open = this.open.bind(this), this.close = this.close.bind(this), c(document.body, "[data-open-popup]", "click", this.open), c(document.body, ".popup__close", "click", this.close), c(document.body, ".popup__layer", "click", this.close), document.addEventListener("keyup", e => {
                27 === e.keyCode && this.close(e)
            })
        }
        getPopupById(e) {
            return function(e, t) {
                return (t || document).querySelector(e)
            }(`[data-popup-id="${e}"]`)
        }
        open(e, t = !1) {
            if (e.preventDefault(), this.isAnimating) return;
            if (this.isOpen) return;
            const n = (t || e.target).getAttribute("data-open-popup"),
                i = this.getPopupById(n);
            if (!i) return;
            this.isAnimating = !0, this.currentPopup = i, i.style.top = `${h.b.y}px`, this.isOpen = !0;
            const s = i.querySelector(".popup__layer"),
                o = i.querySelector(".popup__panel"),
                r = i.querySelector(".popup__right"),
                a = i.querySelector(".popup .person__image img"),
                l = new m.TimelineMax({
                    onComplete: () => {
                        this.isAnimating = !1
                    }
                });
            l.timeScale(1.3), this.tl && this.tl.kill(), this.tl = l, l.add(() => {
                i.style.display = "block"
            }, 0), l.fromTo(s, 1, {
                opacity: 0
            }, {
                opacity: 1
            }, 0);
            const u = {
                p1x: 0,
                p1y: 0,
                p2x: 0,
                p2y: 0,
                p3x: 0,
                p3y: 100,
                p4x: 0,
                p4y: 100
            };
            let c = 0;
            l.to(u, 1.15, {
                p2x: 100,
                ease: "Power4.easeInOut"
            }, 0), l.to(u, 1.2, {
                p3x: 100,
                ease: "Power4.easeInOut",
                onUpdate: () => {
                    const e = `polygon(${u.p1x}% ${u.p1y}%, ${u.p2x}% ${u.p2y}%, ${u.p3x}% ${u.p3y}%, ${u.p4x}% ${u.p4y}%)`;
                    o.style.clipPath = e, o.style.webkitClipPath = e, o.style.transform = `translateZ(${c++}px)`
                }
            }, 0), l.from(r, 2.2, {
                opacity: 0,
                y: 200,
                ease: "Power4.easeOut"
            }, 0), l.add(() => {
                a && m.TweenMax.fromTo(a, 3, {
                    scale: 1.2
                }, {
                    scale: 1,
                    ease: "Power4.easeOut"
                })
            }, 0), l.add(() => {
                o.style.clipPath = ""
            }, 1.21);
            const d = i.querySelector(".popup__close .first span"),
                p = i.querySelector(".popup__close .second span");
            l.fromTo(d, .2, {
                scaleX: 0
            }, {
                scaleX: 1,
                ease: "Power4.easeOut"
            }, 1), l.fromTo(p, .2, {
                scaleX: 0
            }, {
                scaleX: 1,
                ease: "Power4.easeOut"
            }, 1), l.from(d, .6, {
                rotation: 45,
                ease: "Power4.easeInOut"
            }, 1.1), l.from(p, .65, {
                rotation: -45,
                ease: "Power4.easeInOut"
            }, 1.1)
        }
        close(e) {
            if (e.preventDefault(), this.isAnimating) return;
            if (!this.isOpen) return;
            const t = this.currentPopup;
            if (!t) return;
            this.isAnimating = !0;
            const n = t.querySelector(".popup__layer"),
                i = t.querySelector(".popup__panel"),
                s = new m.TimelineMax({
                    onComplete: () => {
                        t.style.display = "none", this.isOpen = !1, this.isAnimating = !1
                    }
                });
            s.timeScale(1.3), this.tl && this.tl.kill(), this.tl = s;
            const o = t.querySelector(".popup__close .first span"),
                r = t.querySelector(".popup__close .second span");
            s.to(o, .2, {
                scaleX: 0,
                ease: "Power4.easeOut"
            }, 0), s.to(r, .2, {
                scaleX: 0,
                ease: "Power4.easeOut"
            }, 0);
            const a = {
                p1x: 0,
                p1y: 0,
                p2x: 100,
                p2y: 0,
                p3x: 100,
                p3y: 100,
                p4x: 0,
                p4y: 100
            };
            let l = 0;
            s.to(a, .9, {
                p1x: 100,
                ease: "Power4.easeOut"
            }, 0), s.to(a, 1, {
                p4x: 100,
                ease: "Power4.easeOut",
                onUpdate: () => {
                    const e = `polygon(${a.p1x}% ${a.p1y}%, ${a.p2x}% ${a.p2y}%, ${a.p3x}% ${a.p3y}%, ${a.p4x}% ${a.p4y}%)`;
                    i.style.clipPath = e, i.style.webkitClipPath = e, i.style.transform = `translateZ(${l++}px)`
                }
            }, 0), s.to(n, 1, {
                opacity: 0
            }, .2)
        }
    }
    var v = n(20);
    var f = new class {
            constructor() {
                this.sounds = {}, this.init()
            }
            init() {
                this.sounds.contact = new v.Howl({
                    src: [`${window.EPICINFO.BASEURL}/assets/sounds/mail-sent.mp3`]
                }), this.transition = [new v.Howl({
                    src: [`${window.EPICINFO.BASEURL}/assets/sounds/hi-perc14.mp3`],
                    volume: .6
                }), new v.Howl({
                    src: [`${window.EPICINFO.BASEURL}/assets/sounds/hi-perc15.mp3`],
                    volume: .6
                }), new v.Howl({
                    src: [`${window.EPICINFO.BASEURL}/assets/sounds/hi-perc16.mp3`],
                    volume: .6
                })], c(document, "[data-click-sound-contact]", "click", () => {
                    this.sounds.contact.play()
                })
            }
            playHover() {
                const e = +new Date;
                this.lastHover && e - this.lastHover < 200 || (this.lastHover = e, this.hovers[Math.floor(Math.random() * this.hovers.length)].play())
            }
        },
        g = n(6),
        x = n.n(g),
        y = n(169),
        w = n(10);
    y.a;
    const b = (() => {
        let e = !1;
        return window.CSS && window.CSS.supports && (e = window.CSS.supports("clip-path", "polygon(0 25%, 100% 25%, 100% 30%, 0 30%)")), e
    })();
    var T = {
        sync: !0,
        from: {
            custom: () => d.a.device.isDesktop
        },
        leave: () => new Promise(e => {
            window.setTimeout(e, 2e3)
        }),
        before({
            current: e,
            next: t
        }) {
            h.b.fixedContainer = t.container, t.container.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n    ", h.b.lock(), TweenLite.to(h.b, 1, {
                y: 0,
                ease: "Power4.easeInOut"
            })
        },
        enter({
            current: e,
            next: t
        }) {
            const n = this.async(),
                i = new m.TimelineMax({
                    onComplete: n
                });
            i.add(() => {
                document.documentElement.classList.add("transition"), b ? (e.container.classList.add("glitch1"), t.container.classList.add("glitch2")) : (e.container.classList.add("flash1"), t.container.classList.add("flash2")), f.transition[0].play()
            }), i.add(() => {
                f.transition[1].play()
            }, .4), i.add(() => {
                f.transition[2].play()
            }, 1.3), i.to(w.a.material.uniforms.uGlitch, .2, {
                value: 1
            }), i.to(w.a.material.uniforms.uDarken, .5, {
                value: 1,
                ease: "Power4.easeInOut"
            }, 0), i.to(w.a.material.uniforms.uDarken, .5, {
                value: 0,
                ease: "Power4.easeInOut"
            }, 1.5), i.add(() => {
                w.a.material.uniforms.uGlitch.value = 0, t.container.classList.remove("glitch2"), t.container.classList.remove("flash2"), document.documentElement.classList.remove("transition")
            }, 2)
        },
        after({
            next: e
        }) {
            e.container.style.cssText = "", h.b.fixedContainer && (h.b.fixedContainer.style.transform = ""), h.b.fixedContainer = null, h.b.oldY = 0, h.b.y = 0, h.b.easeY = 0, h.b.parallaxEasedY = 0, window.scrollTo(0, 0), h.b.vslocked = !1, h.b.unlock(), window.setTimeout(() => {
                h.c.onResize()
            }, 100)
        }
    };
    const P = document.querySelector(".mobile-panel-transition");
    var S = {
            sync: !0,
            from: {
                custom: () => !d.a.device.isDesktop
            },
            leave: () => new Promise(e => {
                window.setTimeout(e, 1200)
            }),
            before({
                current: e,
                next: t
            }) {
                e.container.style.cssText = "\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n    ", t.container.style.cssText = "\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      display: none;\n    "
            },
            enter({
                current: e,
                next: t
            }) {
                const n = this.async(),
                    i = new m.TimelineMax({
                        onComplete: n
                    });
                i.add(() => {
                    document.documentElement.classList.add("transition")
                }, 0), i.fromTo(P, .6, {
                    display: "block",
                    yPercent: 100
                }, {
                    yPercent: 0,
                    ease: "Power4.easeOut"
                }), i.set(t.container, {
                    display: "block"
                }), i.set(e.container, {
                    display: "none"
                }), i.add(() => {
                    h.b.oldY = 0, h.b.y = 0, h.b.easeY = 0, h.b.parallaxEasedY = 0, window.scrollTo(0, 0)
                }), i.fromTo(P, .6, {
                    yPercent: 0
                }, {
                    yPercent: -100,
                    display: "none",
                    ease: "Power4.easeIn"
                }), i.add(() => {
                    document.documentElement.classList.remove("transition")
                })
            },
            after({
                next: e
            }) {
                e.container.style.cssText = "", window.setTimeout(() => {
                    h.c.onResize()
                }, 100)
            }
        },
        O = () => {
            x.a.init({
                transitions: [T, S],
                prevent: ({
                    el: e
                }) => !!window.EPICINFO.WPBAR && u(e, "#wpadminbar")
            }), x.a.prevent.tests.set("sameUrl", () => !1)
        },
        M = n(48),
        _ = n.n(M);

    function E(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(e);
            t && (i = i.filter(function(t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable
            })), n.push.apply(n, i)
        }
        return n
    }

    function F(e, t, n) {
        return t in e ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = n, e
    }
    const L = new class extends l.CustomEvent {
        constructor(...e) {
            super(...e), this.scope = "global", this.log = !0, this.observers = new Set, this.elementsByObserver = new l.Multimap, this.onceByElement = new Map
        }
        bind(e, t, n) {
            if (n.disabled) return;
            const i = e.context.element,
                s = function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var n = null != arguments[t] ? arguments[t] : {};
                        t % 2 ? E(Object(n), !0).forEach(function(t) {
                            F(e, t, n[t])
                        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : E(Object(n)).forEach(function(t) {
                            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t))
                        })
                    }
                    return e
                }({
                    root: null,
                    rootMargin: "0px 0px 0px 0px",
                    threshold: [0, 1],
                    once: !1
                }, n),
                o = this.createObserver(s, i);
            this.onceByElement.set(i, s.once), this.eventByElement.set(i, this.callback(e)), o.observe(i)
        }
        createObserver(e, t) {
            const n = this.getObserverByOptions(e);
            if (n) return this.getObserverByElement(t) || this.addObserver(n, t), n;
            const i = new IntersectionObserver(this.intersected.bind(this), e);
            return this.addObserver(i, t), i
        }
        getObserverByOptions(e) {
            const t = Array.isArray(e.threshold) ? e.threshold : [e.threshold];
            return Array.from(this.observers).find(n => n.root === e.root && n.rootMargin === e.rootMargin && _()(n.thresholds, t))
        }
        getObserverByElement(e) {
            return this.elementsByObserver.getKeysForValue(e)[0]
        }
        addObserver(e, t) {
            this.observers.add(e), this.elementsByObserver.add(e, t)
        }
        removeObserver(e, t) {
            this.elementsByObserver.delete(e, t), 0 === this.elementsByObserver.getValuesForKey(e) && this.observers.delete(e)
        }
        unobserve(e) {
            const t = this.getObserverByElement(e);
            t && t.unobserve(e), this.removeObserver(t, e)
        }
        unbind(e) {
            const t = e.context.element;
            this.unobserve(t)
        }
        intersected(e) {
            e.forEach(e => {
                const t = e.target;
                let n = !1,
                    i = !1;
                e.isIntersecting ? (n = !0, i = e.intersectionRatio >= 1) : (n = !1, i = !1);
                const s = e.boundingClientRect.top < e.rootBounds.top,
                    o = e.boundingClientRect.top + e.boundingClientRect.height > e.rootBounds.top + e.rootBounds.height;
                let r = "center";
                s ? r = "top" : o && (r = "bottom"), this.eventByElement.get(t)(n, i, r), n && this.onceByElement.get(t) && this.unobserve(t)
            })
        }
        callback(e) {
            return function(t, n, i) {
                e.onAppear(t, n, i)
            }
        }
    }("appear");
    new class extends l.CustomEvent {
        constructor(...e) {
            super(...e), this.scope = "global", this.log = !1
        }
        bind(e, t) {
            const n = e.context.element;
            this.ee = t, this.eventByElement.set(n, this.callback(e)), this.ee.on("raf", this.eventByElement.get(n)), this.onTick = this.onTick.bind(this), this.time = window.performance.now(), this.raf = window.requestAnimationFrame(this.onTick)
        }
        unbind(e, t) {
            t.off("raf", this.eventByElement.get(e.context.element)), window.cancelAnimationFrame(this.raf)
        }
        onTick(e) {
            this.time = e, this.delta = (e - this.oldTime) / 1e3, this.oldTime = e, this.ee.emit("raf", this.delta, e), this.raf = window.requestAnimationFrame(this.onTick)
        }
        callback(e) {
            return function(t, n) {
                e.onRaf(t, n)
            }
        }
    }("raf");
    var R = n(33),
        k = n.n(R);
    new class extends l.CustomEvent {
        constructor(...e) {
            super(...e), this.scope = "global", this.log = !0
        }
        bind(e, t) {
            const n = e.context.element;
            this.eventByElement.set(n, this.callback(e, t)), window.addEventListener("resize", this.eventByElement.get(n))
        }
        unbind(e) {
            const t = e.context.element;
            window.removeEventListener("resize", this.eventByElement.get(t))
        }
        callback(e, t) {
            return function() {
                const n = k.a.viewportW(),
                    i = k.a.viewportH(),
                    s = n / i;
                t.emit("resize", n, i, s), e.onResize(n, i, s)
            }
        }
    }("resize");
    new class extends l.CustomEvent {
        constructor(...e) {
            super(...e), this.scope = "global", this.log = !1
        }
        bind(e) {
            const t = e.context.element;
            this.eventByElement.set(t, this.callback(e)), window.addEventListener("scroll", this.eventByElement.get(t))
        }
        unbind(e) {
            const t = e.context.element;
            window.removeEventListener("scroll", this.eventByElement.get(t))
        }
        callback(e) {
            return function() {
                e.onScroll(window.pageXOffset, window.pageYOffset)
            }
        }
    }("scroll");
    class U {
        static start() {
            return new U
        }
        constructor() {
            Promise.all([U.domReady(), U.loadFonts()]).then(this.init.bind(this))
        }
        static domReady() {
            return new Promise(e => {
                document.addEventListener("DOMContentLoaded", e)
            })
        }
        static loadFonts() {
            const e = a();
            try {
                r.a.load({
                    custom: {
                        families: ["Gilroy:300,400,600,700,800"]
                    },
                    google: {
                        families: ["Heebo:300,400,700"]
                    },
                    active: () => {
                        window.setTimeout(e.resolve, 50)
                    },
                    inactive: () => {
                        window.setTimeout(e.resolve, 50)
                    }
                })
            } catch (t) {
                window.setTimeout(e.resolve, 50)
            }
            return e
        }
        static showPage() {
            document.documentElement.classList.add("ready")
        }
        init() {
            s.init();
            const e = d.a.device.browser.name;
            "Internet Explorer" !== e && "Microsoft Edge" !== e && O(), new p;
            try {
                const e = n(66),
                    t = l.Application.start(document.body);
                t.use("appear", L), t.load(Object(l.autoLoad)(e))
            } catch (e) {}
            U.showPage()
        }
    }
    U.start()
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(17),
        o = n(4);
    t.default = class extends i.Component {
        init() {
            o.a.dom && s.a.register(this.$el)
        }
        destroy() {
            o.a.dom && s.a.unregister(this.$el)
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(3),
        o = n(2),
        r = n(1),
        a = n(11);
    t.default = class extends i.Component {
        init() {
            this.instance = new class extends(Object(s.a)()) {
                init() {
                    this.card = this._args[0].querySelector(".ticket__cta"), this.shadow = this._args[0].querySelector(".ticket__cta__shadow"), this.force = Object(a.randomFloat)(.6, 1)
                }
                onRaf({
                    delta: e
                }) {
                    const t = 50 * r.b.speed2 * this.force;
                    this.card.style.transform = `rotateX(${t}deg)`, this.shadow.style.opacity = Math.min(1, Math.pow(r.b.speed, 2))
                }
            }(this.$el), this.enter = this.enter.bind(this), this.$refs.cta.addEventListener("mouseenter", this.enter)
        }
        destroy() {
            this.instance.destroy()
        }
        enter() {
            new o.TimelineMax({});
            o.TweenMax.set(this.$refs.laser, {
                opacity: 0,
                y: -10
            }), o.TweenMax.to(this.$refs.laser, .05, {
                opacity: 1
            }), o.TweenMax.to(this.$refs.laser, .4, {
                y: 25,
                ease: o.SlowMo.ease.config(.7, .7, !1)
            }), o.TweenMax.to(this.$refs.laser, .05, {
                opacity: 0,
                delay: .35
            })
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(3),
        o = n(2),
        r = n(4);
    t.default = class extends i.Component {
        init() {
            this.isOpen = !1, this.isAnimating = !1, this.show = this.show.bind(this), this.close = this.close.bind(this), r.a.boarding && r.a.dom ? s.b.on("boardingEnd", this.show) : window.setTimeout(this.show, 500), document.addEventListener("keyup", e => {
                27 === e.keyCode && this.close(e)
            }), this.$refs.close.addEventListener("click", this.close), this.$refs.layer.addEventListener("click", this.close)
        }
        show() {
            this.isAnimating = !0, this.isOpen = !0;
            const e = new o.TimelineMax({
                onComplete: () => {
                    this.isAnimating = !1
                }
            });
            this.tl && this.tl.kill(), this.tl = e, e.add(() => {
                this.$el.style.display = "block"
            }, 0), e.fromTo(this.$refs.layer, 1, {
                opacity: 0
            }, {
                opacity: 1
            }, 0);
            const t = {
                p1x: 0,
                p1y: 0,
                p2x: 0,
                p2y: 0,
                p3x: 0,
                p3y: 100,
                p4x: 0,
                p4y: 100
            };
            let n = 0;
            e.to(t, 1.15, {
                p2x: 100,
                ease: "Power4.easeInOut"
            }, 0), e.to(t, 1.2, {
                p3x: 100,
                ease: "Power4.easeInOut",
                onUpdate: () => {
                    const e = `polygon(${t.p1x}% ${t.p1y}%, ${t.p2x}% ${t.p2y}%, ${t.p3x}% ${t.p3y}%, ${t.p4x}% ${t.p4y}%)`;
                    this.$refs.panel.style.clipPath = e, this.$refs.panel.style.webkitClipPath = e, this.$refs.panel.style.transform = `translateZ(${n++}px)`
                }
            }, 0), e.from(this.$refs.right, 2.2, {
                opacity: 0,
                y: 200,
                ease: "Power4.easeOut"
            }, 0), e.add(() => {
                this.$refs.img && o.TweenMax.fromTo(this.$refs.img, 3, {
                    scale: 1.2
                }, {
                    scale: 1,
                    ease: "Power4.easeOut"
                })
            }, 0), e.add(() => {
                this.$refs.panel.style.clipPath = ""
            }, 1.21);
            const i = this.$el.querySelector(".popup__close .first span"),
                s = this.$el.querySelector(".popup__close .second span");
            e.fromTo(i, .2, {
                scaleX: 0
            }, {
                scaleX: 1,
                ease: "Power4.easeOut"
            }, 1), e.fromTo(s, .2, {
                scaleX: 0
            }, {
                scaleX: 1,
                ease: "Power4.easeOut"
            }, 1), e.from(i, .6, {
                rotation: 45,
                ease: "Power4.easeInOut"
            }, 1.1), e.from(s, .65, {
                rotation: -45,
                ease: "Power4.easeInOut"
            }, 1.1)
        }
        close(e) {
            if (e.preventDefault(), this.isAnimating) return;
            if (!this.isOpen) return;
            this.isAnimating = !0;
            const t = this.$refs.layer,
                n = this.$refs.panel,
                i = new o.TimelineMax({
                    onComplete: () => {
                        this.$el.style.display = "none", this.isOpen = !1, this.isAnimating = !1
                    }
                });
            this.tl && this.tl.kill(), this.tl = i;
            const s = this.$el.querySelector(".popup__close .first span"),
                r = this.$el.querySelector(".popup__close .second span");
            i.to(s, .2, {
                scaleX: 0,
                ease: "Power4.easeOut"
            }, 0), i.to(r, .2, {
                scaleX: 0,
                ease: "Power4.easeOut"
            }, 0);
            const a = {
                p1x: 0,
                p1y: 0,
                p2x: 100,
                p2y: 0,
                p3x: 100,
                p3y: 100,
                p4x: 0,
                p4y: 100
            };
            let l = 0;
            i.to(a, .9, {
                p1x: 100,
                ease: "Power4.easeOut"
            }, 0), i.to(a, 1, {
                p4x: 100,
                ease: "Power4.easeOut",
                onUpdate: () => {
                    const e = `polygon(${a.p1x}% ${a.p1y}%, ${a.p2x}% ${a.p2y}%, ${a.p3x}% ${a.p3y}%, ${a.p4x}% ${a.p4y}%)`;
                    n.style.clipPath = e, n.style.webkitClipPath = e, n.style.transform = `translateZ(${l++}px)`
                }
            }, 0), i.to(t, 1, {
                opacity: 0
            }, .2)
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(4),
        o = n(2);
    t.default = class extends i.Component {
        init() {
            s.a.dom ? (this.lines = this.$el.querySelectorAll(".line span"), this.hasLines = this.lines.length, this.optionsAppear = {
                once: !0,
                threshold: [.5, 1],
                disabled: !this.hasLines
            }, o.TweenMax.set(this.lines, {
                yPercent: 100
            })) : this.optionsAppear = {
                disabled: !0
            }
        }
        onAppear(e) {
            e && this.hasLines && o.TweenMax.staggerFromTo(this.lines, 1.6, {
                yPercent: 100
            }, {
                yPercent: 0,
                ease: "Power4.easeOut"
            }, .2)
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(3),
        s = n(1),
        o = n(4),
        r = n(5);
    t.default = class extends r.Component {
        init() {
            o.a.dom && (this.instance = new class extends(Object(i.a)()) {
                init() {
                    this.element = this._args[0], this.speed = parseFloat(this.element.dataset.parallax)
                }
                onResize() {
                    this.element.style.transform = "translate3d(0px, 0px, 0px)";
                    const e = this.element.getBoundingClientRect();
                    this.bounds = {
                        left: e.left,
                        top: e.top,
                        width: e.width,
                        height: e.height
                    }, this.bounds.y += s.b.vs ? s.b.easeY : s.b.y
                }
                onRaf() {
                    if (s.c.width < 1024) return;
                    if (s.b.vslocked) return;
                    const e = s.b.parallaxEasedY * (2e-4 * this.speed) * s.c.height,
                        t = Math.round(100 * e) / 100;
                    this.element.style.transform = `translate3d(0px, ${-t}px, 0px)`
                }
            }(this.$el))
        }
        destroy() {
            this.instance && this.instance.destroy()
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(2),
        o = n(1),
        r = n(6),
        a = n.n(r),
        l = n(3);
    t.default = class extends i.Component {
        init() {
            this.programMouseEnter = this.programMouseEnter.bind(this), this.programMouseLeave = this.programMouseLeave.bind(this), this.$refs.program.addEventListener("mouseenter", this.programMouseEnter), this.$refs.program.addEventListener("mouseleave", this.programMouseLeave), a.a.hooks.leave(() => this.programMouseLeave()), a.a.hooks.after(e => this.handleAnchor(e.next.container)), l.b.on("loadEnd", this.onLoadEnd.bind(this)), l.b.on("boardingEnd", this.onLoadEnd.bind(this)), window.addEventListener("hashchange", () => this.handleAnchor())
        }
        onLoadEnd() {
            window.setTimeout(() => {
                this.handleAnchor()
            }, 50)
        }
        destroy() {}
        handleAnchor(e = document.body) {
            window.setTimeout(() => {
                if (window.location.hash) {
                    const t = window.location.hash,
                        n = e.querySelector(t);
                    if (n) {
                        const e = n.getBoundingClientRect().y,
                            t = o.b.y + e;
                        window.scrollTo(0, t - 100)
                    }
                }
            }, 200)
        }
        programMouseEnter() {
            const e = new s.TimelineMax({});
            this.tl && this.tl.kill(), this.tl = e, e.set(this.$refs.sublist, {
                display: "block"
            }), this.$refs.sublist.style.pointerEvents = "auto";
            const t = this.$refs.sublistcontainer,
                n = t.querySelectorAll(".label, li"),
                i = {
                    p1x: 0,
                    p1y: 0,
                    p2x: 0,
                    p2y: 0,
                    p3x: 0,
                    p3y: 100,
                    p4x: 0,
                    p4y: 100
                };
            e.fromTo(t, 1.6, {
                y: 10
            }, {
                y: 0,
                ease: "Power4.easeOut"
            }, 0), e.to(i, 1.15, {
                p2x: 100,
                ease: "Power4.easeOut"
            }, 0), e.to(i, 1.2, {
                p3x: 100,
                ease: "Power4.easeOut",
                onUpdate: () => {
                    const e = `polygon(${i.p1x}% ${i.p1y}%, ${i.p2x}% ${i.p2y}%, ${i.p3x}% ${i.p3y}%, ${i.p4x}% ${i.p4y}%)`;
                    t.style.clipPath = e, t.style.webkitClipPath = e
                }
            }, 0), e.staggerFromTo(n, 1.7, {
                y: 30
            }, {
                y: 0,
                ease: "Power4.easeOut"
            }, .03, 0)
        }
        programMouseLeave() {
            const e = new s.TimelineMax({
                onComplete: () => {
                    s.TweenMax.set(this.$refs.sublist, {
                        display: "none"
                    }), this.$refs.sublist.style.pointerEvents = "auto"
                }
            });
            this.tl && this.tl.kill(), this.tl = e;
            const t = this.$refs.sublistcontainer;
            this.$refs.sublist.style.pointerEvents = "none";
            const n = {
                p1x: 0,
                p1y: 0,
                p2x: 100,
                p2y: 0,
                p3x: 100,
                p3y: 100,
                p4x: 0,
                p4y: 100
            };
            e.to(n, .9, {
                p1x: 100,
                ease: "Power4.easeOut"
            }, 0), e.to(n, 1, {
                p4x: 100,
                ease: "Power4.easeOut",
                onUpdate: () => {
                    const e = `polygon(${n.p1x}% ${n.p1y}%, ${n.p2x}% ${n.p2y}%, ${n.p3x}% ${n.p3y}%, ${n.p4x}% ${n.p4y}%)`;
                    t.style.clipPath = e, t.style.webkitClipPath = e
                }
            }, 0)
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(2),
        o = n(6),
        r = n.n(o);
    n(10);
    t.default = class extends i.Component {
        init() {
            this.isOpen = !1, this.eventsOpen = !1, this.isAnimating = !1, this.toggle = this.toggle.bind(this), this.open = this.open.bind(this), this.close = this.close.bind(this), this.toggleEvent = this.toggleEvent.bind(this), this.openEvent = this.openEvent.bind(this), this.closeEvent = this.closeEvent.bind(this), this.$refs.toggler.addEventListener("click", this.toggle.bind(this)), this.$refs.layer.addEventListener("click", this.close.bind(this)), this.$refs.programbigitem.addEventListener("click", this.toggleEvent.bind(this)), document.addEventListener("keyup", e => {
                27 === e.keyCode && this.close(e)
            }), r.a.hooks.leave(() => this.close(!1, !0))
        }
        toggle() {
            this[this.isOpen ? "close" : "open"]()
        }
        open(e) {
            if (e && e.preventDefault(), this.isAnimating) return;
            if (this.isOpen) return;
            this.isAnimating = !0, this.$el.classList.add("menu-open"), this.isOpen = !0, this.$refs.menu.style.display = "block";
            const t = new s.TimelineMax({
                onComplete: () => {
                    this.isAnimating = !1
                }
            });
            t.fromTo(this.$refs.layer, 2, {
                opacity: 0
            }, {
                opacity: 1,
                ease: "Power4.easeOut"
            }, 0), t.fromTo(this.$refs.blue, 1, {
                scaleY: 0
            }, {
                scaleY: 1,
                ease: "Power4.easeInOut"
            }, 0);
            const n = this.$refs.content;
            n.style.visibility = "hidden";
            const i = {
                p1x: 0,
                p1y: 0,
                p2x: 100,
                p2y: 0,
                p3x: 100,
                p3y: 0,
                p4x: 0,
                p4y: 0
            };
            let o = 0;
            t.add(() => {
                n.style.visibility = "visible"
            }, 0), t.to(i, 1.1, {
                p3y: 100,
                ease: "Power4.easeInOut"
            }, 0), t.to(i, 1.15, {
                p4y: 100,
                ease: "Power4.easeInOut",
                onUpdate: () => {
                    const e = `polygon(${i.p1x}% ${i.p1y}%, ${i.p2x}% ${i.p2y}%, ${i.p3x}% ${i.p3y}%, ${i.p4x}% ${i.p4y}%)`;
                    n.style.clipPath = e, n.style.webkitClipPath = e, n.style.transform = `translateZ(${o++}px)`
                }
            }, 0);
            const r = n.querySelectorAll(".menu__bigitem__jsscroll");
            t.staggerFromTo(r, 1, {
                yPercent: 100
            }, {
                yPercent: 0,
                ease: "Power4.easeOut"
            }, .1, .3);
            const a = n.querySelectorAll(".menu__right li");
            t.staggerFromTo(a, 1.7, {
                y: 50
            }, {
                y: 0,
                ease: "Power4.easeOut"
            }, .1, 0)
        }
        close(e, t = !1) {
            if (e && e.preventDefault(), this.isAnimating && !t) return;
            if (!this.isOpen) return;
            this.eventsOpen && this.closeEvent(), this.isAnimating = !0;
            const n = new s.TimelineMax({
                onComplete: () => {
                    this.$el.classList.remove("menu-open"), this.isOpen = !1, this.$refs.menu.style.display = "none", this.isAnimating = !1
                }
            });
            n.fromTo(this.$refs.layer, 1, {
                opacity: 1
            }, {
                opacity: 0,
                ease: "Power4.easeOut"
            }, .3), n.fromTo(this.$refs.blue, .7, {
                scaleY: 1
            }, {
                scaleY: 0,
                ease: "Power4.easeIn"
            }, 0);
            const i = this.$refs.content,
                o = {
                    p1x: 0,
                    p1y: 0,
                    p2x: 100,
                    p2y: 0,
                    p3x: 100,
                    p3y: 100,
                    p4x: 0,
                    p4y: 100
                };
            let r = 0;
            n.to(o, 1.1, {
                p3y: 0,
                ease: "Power4.easeInOut"
            }, 0), n.to(o, 1.15, {
                p4y: 0,
                ease: "Power4.easeInOut",
                onUpdate: () => {
                    const e = `polygon(${o.p1x}% ${o.p1y}%, ${o.p2x}% ${o.p2y}%, ${o.p3x}% ${o.p3y}%, ${o.p4x}% ${o.p4y}%)`;
                    i.style.clipPath = e, i.style.webkitClipPath = e, i.style.transform = `translateZ(${r++}px)`
                }
            }, 0)
        }
        toggleEvent(e) {
            e && e.preventDefault(), e && e.stopPropagation(), this[this.eventsOpen ? "closeEvent" : "openEvent"]()
        }
        openEvent(e) {
            e && e.preventDefault(), e && e.stopPropagation(), s.TweenMax.killTweensOf(this.$refs.events), s.TweenMax.set(this.$refs.events, {
                height: "auto"
            }), s.TweenMax.from(this.$refs.events, 1, {
                height: 0,
                ease: "Power4.easeOut"
            });
            const t = this.$refs.events.querySelectorAll(".label, li");
            s.TweenMax.staggerFromTo(t, .8, {
                y: 40
            }, {
                y: 0,
                ease: "Power4.easeOut"
            }, .02), this.$refs.programbigitem.classList.add("active"), this.eventsOpen = !0
        }
        closeEvent(e) {
            e && e.preventDefault(), s.TweenMax.killTweensOf(this.$refs.events), s.TweenMax.to(this.$refs.events, 1, {
                height: 0,
                clearProps: "height",
                ease: "Power4.easeOut"
            }), this.$refs.programbigitem.classList.remove("active"), this.eventsOpen = !1
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5);
    n(4);
    t.default = class extends i.Component {
        init() {}
    }
}, function(e, t, n) {
    "use strict";
    n.r(t), n.d(t, "default", function() {
        return u
    });
    var i = n(3),
        s = (n(1), n(12)),
        o = n(9),
        r = n(8),
        a = (n(4), n(10)),
        l = n(18);
    class u extends(Object(i.a)()) {
        init() {
            l.a.load(), document.querySelector(".canvas").appendChild(s.a.domElement)
        }
        onRaf() {
            a.a.render(r.a, o.a)
        }
        onLoadEnd() {
            s.a.compile(r.a, o.a), document.documentElement.classList.add("show")
        }
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(4);
    t.default = class extends i.Component {
        load() {}
        init() {
            if (!s.a.dom) return void document.documentElement.classList.add("show");
            new(0, n(63).default)
        }
        destroy() {}
    }
}, function(e, t, n) {
    "use strict";
    n.r(t);
    var i = n(5),
        s = n(2),
        o = n(1);
    t.default = class extends i.Component {
        init() {
            this.isOpen = !1, this.toggle = this.toggle.bind(this), this.$refs.toggle.addEventListener("click", this.toggle)
        }
        destroy() {}
        toggle(e) {
            e && e.preventDefault(), e && e.stopPropagation(), this[this.isOpen ? "close" : "open"]()
        }
        open(e) {
            if (e && e.preventDefault(), this.isAnimating || this.isOpen) return;
            this.isAnimating = !0, this.$el.classList.add("open"), s.TweenMax.killTweensOf(this.$refs.content);
            const t = new s.TimelineMax({
                onComplete: () => {
                    this.isOpen = !0, this.isAnimating = !1, o.c.onResize()
                }
            });
            s.TweenMax.set(this.$refs.content, {
                height: "auto"
            }), t.from(this.$refs.content, .8, {
                height: 0,
                ease: "Power4.easeOut"
            })
        }
        close(e) {
            if (e && e.preventDefault(), this.isAnimating || !this.isOpen) return;
            this.isAnimating = !0, this.$el.classList.remove("open"), s.TweenMax.killTweensOf(this.$refs.content), new s.TimelineMax({
                onComplete: () => {
                    this.isOpen = !1, this.isAnimating = !1, o.c.onResize()
                }
            }).to(this.$refs.content, .8, {
                height: 0,
                ease: "Power4.easeOut"
            })
        }
    }
}, function(e, t, n) {
    var i = {
        "./cookiebar/Cookiebar.js": 52,
        "./expand/Expand.js": 65,
        "./gl/Gl.js": 64,
        "./lottie/Lottie.js": 62,
        "./nav/Menu.js": 61,
        "./nav/Nav.js": 60,
        "./parallax/Parallax.js": 59,
        "./showtext/Showtext.js": 58,
        "./thank/Thank.js": 57,
        "./ticket/Ticket.js": 56,
        "./trackable/Trackable.js": 55
    };

    function s(e) {
        var t = o(e);
        return n(t)
    }

    function o(e) {
        var t = i[e];
        if (!(t + 1)) {
            var n = new Error('Cannot find module "' + e + '".');
            throw n.code = "MODULE_NOT_FOUND", n
        }
        return t
    }
    s.keys = function() {
        return Object.keys(i)
    }, s.resolve = o, e.exports = s, s.id = 66
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.z += sin((pos.x + pos.y) * 4.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 color = texture2D(uTexture, vUv);\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec3 pos = position;\n\n  pos.z += sin(uTime * 30.0 + pos.x + pos.y) * 0.1;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uNoise;\nuniform sampler2D uTextureA;\nuniform sampler2D uTextureB;\nuniform vec2 uDirection;\nuniform float uTime;\nuniform float uProgress;\nuniform float uVisibility;\n\nvarying vec2 vUv;\n\nvoid main() {\n  // vec3 color = vec3(0.0, 0.8901960784, 1.0);\n\n  // float e = sin(vUv.y * 0.2 + vUv.x * 1.2 + uTime * 20.0) * 0.6;\n  // color.rgb += e;\n\n  vec4 noise = texture2D(uNoise, vUv);\n\n  vec2 nuv1  = mix(vUv, vec2(noise.r, vUv.y), uProgress);\n  vec2 nuv2  = mix(vUv, vec2(noise.r, vUv.y), 1.0 - uProgress);\n  // vec2 nuv2  = vUv + (vec2(noise.r, 0.0) * (1.0 - uProgress));\n\n  nuv1 -= uDirection * uProgress;\n  nuv2 += uDirection * (1.0 - uProgress);\n\n  // nuv1 = clamp(nuv1, vec2(0.0), vec2(1.0));\n  // nuv2 = clamp(nuv2, vec2(0.0), vec2(1.0));\n\n  vec4 color = vec4(0.0);\n\n  color = mix(texture2D(uTextureA, nuv1), texture2D(uTextureB, nuv2), uProgress);\n\n  // color = mix(color, vec4(0.0), noise * pow(uDissolve, 0.25));\n  // color = texture2D(uTextureA, vUv).rgb;\n\n  color.a *= mix(0.0, 1.0 + pow(noise.r, 20.0), uVisibility);\n\n  gl_FragColor = vec4(color);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec3 pos = position;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uWind;\nuniform float uTime;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 color = vec3(0.0, 0.8901960784, 1.0);\n\n  float e = sin(vUv.y * 0.2 + vUv.x * 1.2 + uTime * 20.0) * 0.6;\n  color.rgb += e;\n\n  gl_FragColor = vec4(color, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.x += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform float uProgress;\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 color = texture2D(uTexture, vUv);\n\n  float e = sin(vUv.y * 4.0 + vUv.x * 1.2 + uTime * 20.0) * 0.6;\n  color.rgb += e;\n\n  color.a *= uProgress;\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.1;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform float uShow;\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 color = vec3(0.0, 0.01960784314, 0.4235294118);\n\n  gl_FragColor = vec4(color, uShow);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.z += sin((pos.x + pos.y) * 4.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\n// uniform sampler2D uMask;\nuniform vec2 uRectSize;\nuniform vec2 uImageSize;\nuniform float uProgress;\n// uniform bool uHasMask;\n\nvarying vec2 vUv;\n\n// float vignette(vec2 uv, float a, float b) {\n//   float len = length(uv - 0.5);\n//   // return smoothstep(a, b, len);\n//   return len;\n// }\n\nfloat luminance(vec3 rgb) {\n  const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n  return dot(rgb, W);\n}\n\nvoid main() {\n  vec2 uv = vUv;\n\n  vec2 tuv = mix((uv * 0.97), uv, uProgress);\n  vec4 color = texture2D(uTexture, tuv);\n\n  color.r *= mix(0.9, 1.0, uProgress);\n  color.g *= mix(0.0, 1.0, uProgress);\n  color.b *= mix(0.9, 1.0, uProgress);\n\n  color.rgb += .3 * (1.0 - uProgress);\n\n  // if (uHasMask) {\n  //   color.a = 1.0 - texture2D(uMask, tuv).r;\n  // } else {\n    // float v = length(uv - 0.5);\n    // color.a *= 1.0 - (v * 2.0);\n  // }\n\n  float v = length(uv - 0.5);\n  float vignette = (v * 2.0);\n\n  color.a *= 1.0 - vignette;\n\n  color.a = clamp(color.a, 0.0, 1.0);\n  color.a *= uProgress;\n\n  gl_FragColor = color;\n  \n  // gl_FragColor = vec4(vec3(alp), 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.z += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\nuniform sampler2D uWind;\nuniform vec2 uRectSize;\nuniform vec2 uImageSize;\nuniform float uTime;\nuniform float uProgress;\nuniform float uScale;\nuniform float uShow;\n\nvarying vec2 vUv;\n\nvec4 coverTexture(vec2 ruv) {\n  vec2 s = uRectSize;\n  vec2 i = uImageSize;\n\n  float rs = s.x / s.y;\n  float ri = i.x / i.y;\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n\n  offset.y += sin(uTime * 1.2) * 0.1;\n  offset.x += cos(uTime * 2.3) * 0.08;\n\n  vec2 uv = ruv * s / new + offset;\n\n  // vec4 color = texture2D(uTexture, uv);\n  // float gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n  // // float gray = dot(color.rgb, vec3(0.3333, 0.3333, 0.3333));\n\n  // vec3 duo = mix(\n  //   vec3(0.0, 1.0/255.0, 21.0/255.0),\n  //   vec3(0, 0.8901960784, 1.0),\n  //   gray\n  // );\n\n  // return vec4(\n  //   mix(color.rgb, duo, duotone),\n  //   1.0\n  // );\n\n  return texture2D(uTexture, uv);\n}\n\nvoid main() {\n  vec4 color = vec4(1.0);\n\n  if (uProgress > 0.0 || uScale > 0.0) {\n    vec2 ruv = vUv;\n    vec4 wind = texture2D(uWind, vUv.yx);\n    ruv.y = mix(vUv.y, wind.r - 0.2, uProgress * 0.4);\n\n    ruv -= 0.5;\n    ruv *= mix(1.0, 0.95, uScale);\n    ruv += 0.5;\n\n    // color = coverTexture(ruv);\n    color.r = coverTexture(ruv + vec2(0.0, 0.005) * (uProgress)).r;\n    color.g = coverTexture(ruv + vec2(0.0, 0.01) * (uProgress)).g;\n    color.b = coverTexture(ruv + vec2(0.0, 0.02) * (uProgress)).b;\n\n  } else {\n    color = coverTexture(vUv);\n  }\n\n  color.rgb *= smoothstep(0.0, 0.4, vUv.y);\n  color.a = uShow;\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.1;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uWind;\nuniform float uProgress;\nuniform float uShow;\nuniform float uClipping;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 wind = texture2D(uWind, vUv);\n  // wind.r = pow(wind.r, 10.0);\n  // wind.r = clamp(wind.r, 0.0, 1.0);\n\n  vec3 idle = vec3(1.0);\n  vec3 hover = vec3(0.0, 0.8901960784, 1.0);\n\n  // float p = uProgress + wind.r;\n\n  // p = clamp(p, 0.0, 1.0);\n\n  vec3 color = mix(idle, hover, wind.r - (1.0 - uProgress));\n\n  if (vUv.y > uClipping) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, uShow);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\nuniform float uTime;\nvarying vec2 vUv;\n\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vUv);\n  gl_FragColor.a *= 0.07;\n\n  gl_FragColor.a *= 1.0 + ((sin(uTime * 0.3 + vUv.x * 14.0) + 1.0) / 2.0) * 2.0;\n\n  // gl_FragColor = vec4(vUv, 1.0, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nattribute vec2 uv;\nattribute vec3 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform sampler2D texture;\nuniform sampler2D uImage;\nuniform float uSpeed;\nuniform float uTime;\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n  vec4 current = texture2D(texture, uv);\n  vec4 data = texture2D(uImage, uv);\n\n  current += data;\n  current.a *= 0.86;// + (uSpeed * 0.02);\n\n  gl_FragColor = current;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\nuniform sampler2D uData;\n\nattribute float position;\n\nvarying float vInfo;\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\n// attribute vec3 position;\n\nvoid main() {\n  vec4 data = texture2D(uData, vec2(position, 0.0));\n  vec3 pos = data.xyz;\n\n  vInfo = data.a;\n\n  // vec3 pos = position;\n\n  // pos.y += uTime * .9;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  gl_PointSize = mix(0.8, 1.0, when_gt(fract(vInfo), 0.8));\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nvarying float vInfo;\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvoid main() {\n\n  vec3 color = vec3(0.584,0.052,0.880);\n\n  // color = mix(color, vec3(0.0, 0.8901960784, 1.0), when_gt(vInfo, 1.0));\n  // // color = mix(color, vec3(1.0), when_gt(vInfo, 2.0));\n  // color = mix(color, vec3(1.0, 0.0, 0.0), when_gt(vInfo, 3.0));\n\n  gl_FragColor = vec4(color, 1.0);\n\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform float uTime;\nuniform float uSpeed;\nuniform sampler2D texture;\nuniform vec2 uPointer;\n\nvoid main() {\n  // float pixelHeight = 1.0 / RESOLUTION.y;\n  // float pixelWidth = 1.0 / RESOLUTION.x;\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n  vec4 current = texture2D(texture, uv);\n\n  // dist = min(1.0, dist);\n\n  // float dist = distance(uPointer.xy, current.xy);\n  // vec2 angle = normalize(uPointer) - normalize(current.xy);\n\n  float speed = max(-.004, -uSpeed * 0.05);\n  current.y += .01 + speed;\n  // current.x -= (angle.x * 0.01);\n\n  // float forceAngle = 1.0 - smoothstep(0.0, 1.2, dist);\n  // current.xy -= (angle.xy * 0.01) * forceAngle;\n\n  if (current.y > 5.0) {\n    current.y = -5.0;\n  }\n\n  gl_FragColor = current;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform sampler2D uTexture;\nuniform sampler2D uNoise;\nuniform float uForce;\nuniform float uOpacity;\n\nvarying vec2 vUv;\n\nvoid main() {\n  float noise = texture2D(uNoise, vec2(vUv.y, vUv.x)).r;\n  vec2 nuv  = vUv + (vec2(0.0, noise) * uForce);\n  vec4 color = texture2D(uTexture, nuv);\n  color.a *= uOpacity;\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform float uTime;\nuniform sampler2D texture;\nuniform sampler2D uWind;\nuniform sampler2D uTrail;\n\nvoid main() {\n  float pixelHeight = 1.0 / RESOLUTION.y;\n  float pixelWidth = 1.0 / RESOLUTION.x;\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n\n  vec4 current = texture2D(texture, uv);\n  vec4 wind = texture2D(uWind, uv);\n  vec4 trail = texture2D(uTrail, uv);\n\n  // Initial set - todo, set initial data!\n  if (current.a <= 0.9) {\n    current = vec4(uv, 0.0, 1.0);\n  }\n\n  // current.z = 0.0; // speed\n\n  // if (current.x < wind.x) {\n  //   current.z += wind.x - current.x;\n  //   current.x += 0.05 * pow(current.z, 2.0);\n  // }\n\n  if (current.y < wind.y) {\n    current.z = wind.y - current.y;\n    current.y += 0.05 * pow(current.z, 2.0);\n  }\n\n  float t = trail.r * 0.1;\n  // t += trail.r * trail.a;\n\n  float x = (uv.x * 2.0) + uTime * 0.20;\n  float noise = (sin(x) + sin(2.2 * x + 5.52) + sin(2.9 * x + 0.93) + sin(4.6 * x + 8.94)) / 4.0;\n  noise *= 0.3;\n  t = mix(t, t + noise, 0.1);\n\n  t = clamp(t, 0.0, 1.0);\n\n  current.xy = mix(current.xy, uv, t);\n\n  gl_FragColor = current;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform sampler2D uScene;\nuniform sampler2D uTrail;\n// uniform sampler2D uWind;\nuniform vec2 uResolution;\nuniform vec4 uRectSmall;\nuniform float uTime;\nuniform float uSpeed;\nuniform float uGlitch;\nuniform float uSmallGlitch;\nuniform float uDarken;\n\n// #ifdef FXAA\n//   #pragma glslify: fxaa = require(glsl-fxaa)\n// #endif\n\nfloat random(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat parabola( float x, float k )\n{\n    return pow( 4.0*x*(1.0-x), k );\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n// glitch\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n      return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nconst float interval = 0.0;\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 glitch(vec3 color, float time, vec2 vUv, vec2 resolution){\n\n  float gli = uGlitch;\n\n                   // x1  y1   x2   y2\n  vec4 rect = uRectSmall;//vec4(0.2, 0.3, 0.4, 0.5);\n  vec2 hv = step(rect.xy, vUv) * step(vUv, rect.zw);\n  float onOff = hv.x * hv.y;\n\n  gli += onOff;\n\n  float sizeRectMultiplier = mix(1.0, 7.0, onOff);\n\n  time *= mix(1.0, 1.5, onOff);\n\n  float dynamica = mix(0.2, 0.8, gli);\n  float dynamicb = mix(0.12, 0.3, gli);\n\n  float strength = smoothstep(interval * 0.5, interval, interval - mod(time, interval)) * 0.2; // this 0.2\n  float y = vUv.y * resolution.y;\n  float rgbWave = 0.0;\n\n  float rgbDiff = (6.0 + sin(time * 500.0 + vUv.y * 40.0) * (20.0 * strength + 1.0)) / resolution.x;\n\n  float dn = dynamicb; //0.12;\n\n  // float whiteNoise = (random(vUv + mod(time, 10.0)) * 2.0 - 1.0) * (0.15 + strength * 0.15);\n  float bnTime = floor(time * 20.0) * 200.0;\n  float noiseX = step((snoise3(vec3(0.0, vUv.x * (3.0 * sizeRectMultiplier), bnTime)) + 1.0) / 2.0, dn + strength * 0.3);\n  float noiseY = step((snoise3(vec3(0.0, vUv.y * (3.0 * sizeRectMultiplier), bnTime)) + 1.0) / 2.0, dn + strength * 0.3);\n  float bnMask = noiseX * noiseY;\n  float bnUvX = vUv.x + sin(bnTime) * 0.2 + rgbWave;\n  float bnR = texture2D(uScene, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask;\n  float bnG = texture2D(uScene, vec2(bnUvX, vUv.y)).g * bnMask;\n  float bnB = texture2D(uScene, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask;\n  vec4 blockNoise = vec4(bnR, bnG, bnB, 1.0);\n\n  float bnTime2 = floor(time * 25.0) * 300.0;\n  float noiseX2 = step((snoise3(vec3(0.0, vUv.x * (2.0 * sizeRectMultiplier), bnTime2)) + 1.0) / 2.0, dn + strength * 0.5);\n  float noiseY2 = step((snoise3(vec3(0.0, vUv.y * (8.0 * sizeRectMultiplier), bnTime2)) + 1.0) / 2.0, dn + strength * 0.3);\n  float bnMask2 = noiseX2 * noiseY2;\n  float bnR2 = texture2D(uScene, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask2;\n  float bnG2 = texture2D(uScene, vec2(bnUvX, vUv.y)).g * bnMask2;\n  float bnB2 = texture2D(uScene, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask2;\n  vec4 blockNoise2 = vec4(bnR2, bnG2, bnB2, 1.0);\n\n  return vec4(color, 1.0) * (1.0 - bnMask - bnMask2) + (blockNoise + blockNoise2);\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / uResolution.xy;\n  // vec4 wind = texture2D(uWind, uv.yx);\n  vec4 trail = texture2D(uTrail, uv);\n\n  // float force = parabola(uv.y, 6.0);\n\n  // force = force * map(force, 0.0, 1.0, -1.0, 1.0);\n\n  // uv.x += force * 0.1;\n\n  float force = uSpeed;\n  force = min(force, 3.0);\n\n  force *= 0.5;\n\n  float nUvY = pow(1.- uv.y * 1.2, 10.) * force;\n  float curve = max(0., nUvY) + 1.0;\n  curve = map(curve, 1.0, 5.0, 1.0, 2.0);\n\n  float p = ((curve - 1.0)/2.0/curve);\n  uv.x = uv.x/curve + p;\n\n  // uv.y = mix(uv.y, wind.r, nUvY * 0.5);\n\n  vec2 offsetr = vec2(trail.r * 0.003);\n  vec2 offsetg = vec2(trail.r * 0.005);\n  vec2 offsetb = vec2(trail.r * 0.007);\n\n  float r = texture2D(uScene, uv.xy + offsetr).x;\n  float g = texture2D(uScene, uv.xy + offsetg).y;\n  float b = texture2D(uScene, uv.xy + offsetb).z;\n\n  vec3 color = vec3(r, g, b);\n\n  color = glitch(color, uTime, uv, uResolution).rgb;\n\n  // #ifdef FXAA\n  //   vec3 color = fxaa(uScene, gl_FragCoord.xy, uResolution).rgb;\n  // #else\n  //   vec3 color = texture2D(uScene, uv).rgb;\n  // #endif\n\n  // color = linearToneMapping(color);\n\n  float n = random(uv + mod(uTime, 3.0));\n  // color += n * 0.08;\n  color *= 1.0 + (n * 0.2);\n  \n\n  // color += trail.r * 0.05;\n\n  color *= 1.0 + (trail.r * 0.14);\n  color += trail.r * 0.02;\n\n  // color = vec3(0.0);\n  // color.r = nUvY;\n\n  color *= mix(1.0, 2.2 + (n * 0.02), uDarken);\n  color.r *= mix(1.0, 0.9, uDarken);\n  color.g *= mix(1.0, 0.8, uDarken);\n  color.b *= mix(1.0, 0.7, uDarken);\n  // color.g *= mix(1.0, 0.8, uDarken);\n\n  gl_FragColor = vec4(color, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nattribute vec2 position;\n\nvoid main() {\n  gl_Position = vec4(position, 1.0, 1.0);\n}"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D texture;\n// uniform sampler2D uNoise;\nuniform vec2 uPointer;\nuniform vec2 uPrevPointer;\nuniform float uSpeed;\nuniform float uRatio;\n\n// uniform vec4 uRect;\n// uniform float uRectForce;\n\nfloat circle(vec2 uv, vec2 disc_center, float disc_radius, float border_size) {\n  uv -= disc_center;\n  float dist = sqrt(dot(uv, uv));\n  return smoothstep(disc_radius+border_size, disc_radius-border_size, dist);\n}\n\n// float rand(vec2 co){\n//   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n// }\n\n// vec2 rot2d( vec2 p, float a ) {\n//   vec2 sc = vec2(sin(a),cos(a));\n//   return vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n// }\n\n// https://stackoverflow.com/questions/12751080/glsl-point-inside-box-test\n// float inside_rectangle_smooth(vec2 p, vec2 bottom_left, vec2 top_right, float transition_area)\n// {\n//     vec2 s = smoothstep(bottom_left, bottom_left + vec2(transition_area), p) -\n//              smoothstep(top_right - vec2(transition_area), top_right, p);\n//     return(s.x * s.y);\n// }\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n  vec4 color = texture2D(texture, uv + vec2(0.0, -0.002));\n\n  // float rnd = 6.28 * rand( uv * 0.2 /*+fract(iGlobalTime)*/ );\n  // vec2 rand2 = rot2d(vec2(1.0, 0.0), rnd) * 0.1;\n\n  vec2 center = uPointer;\n  uv.x *= uRatio;\n  center.x *= uRatio;\n\n  color.r += circle(uv, center, 0.0, 0.1) * uSpeed;\n  color.r = mix(color.r, 0.0, .009);\n  color.r = clamp(color.r, 0.0, 1.0);\n\n  // color.gb = uPointer - color.gb;\n  // color.gb =\n  // color.a = dot(normalize(uPointer), normalize(color.gb));\n\n  // color.a = color.r * dot(normalize(uPointer), normalize(uPrevPointer));\n  // color.g = color.r * 20.0 * dot(normalize(uPointer), normalize(uPrevPointer));\n\n  color.g = color.r * 5.0;\n\n  // Hover rect\n  // if (uRectForce > 0.0) {\n  //   // vec4 rect = vec4(0.2, 0.3, 0.4, 0.5);\n  //   vec4 rect = uRect;\n  //   // vec2 hv = step(rect.xy, uv) * step(uv, rect.zw);\n  //   // float onOff = hv.x * hv.y;\n\n  //   // float f = uRectForce;\n\n  //   // f += texture2D(uNoise, uv).r * 0.4;\n\n  //   float r = inside_rectangle_smooth(uv, rect.xy, rect.zw, 0.4);\n\n  //   color.r += r;\n  // }\n\n  gl_FragColor = color;\n}\n"
}, , , , , function(e, t, n) {
    e.exports = n(54)
}]);